@using LineList.Cenovus.Com.Domain.DataTransferObjects
@model IEnumerable<LineCollectionViewModel>
@{
	Layout = "~/Views/Shared/_LayoutLine.cshtml";
}
<div id="mainLineSection" class="mt-md-0">
<div class="mt-md-0">
	<div class="row">
		<div class="card mb-md-1">
			<div class="card-header">
				<h5 class="mb-3 page-header">Line List: @Model.FirstOrDefault()?.DocumentNumber @Model.FirstOrDefault()?.Revision</h5>
				<hr />
				<div class="d-flex justify-content-start align-items-center col-12 mb-3">
					<button id="checkOut" class="btn btn-primary me-2">CHECK OUT</button>
					<button id="checkIn" class="btn btn-primary me-2">CHECK IN</button>
					<button id="pasteToSelected" class="btn btn-primary me-2">PASTE TO SELECTED</button>
					<button id="moveSelected" class="btn btn-primary me-2">MOVE SELECTED</button>
					<button id="discard" class="btn btn-primary me-2">DISCARD</button>
					<button id="gridExport" class="btn btn-primary me-2">GRID EXPORT</button>
					<button id="gridImport" class="btn btn-primary me-2">GRID IMPORT</button>
				</div>
				<div class="d-flex justify-content-end align-items-center col-12 text-end mb-2">
					<div class="d-flex align-items-center">
						<button id="exportExcel" class="btn btn-primary">
							<i class="fas fa-file-excel"></i> EXPORT TO EXCEL
						</button>
					</div>
				</div>
			</div>
			<div class="table">
				<table id="dataTable" class="table">
					<thead>
						<tr>
							<th>
								<label class="me-3">
									<input type="checkbox" class="form-check-input" id="select-all" />
								</label>
							</th>
							<th>Actions</th>
							<th>Checked Out By</th>
							<th>Spec</th>
							<th><i class="fas fa-check-circle" style="color: green;"></i></th>
							<th>P/C</th>
							<th>Area</th>
							<th>Location</th>
							<th>Commodity</th>
							<th>Pipe Spec</th>
							<th>Size NPS</th>
							<th>Sequence #</th>
							<th>Line Status</th>
							<th>Line Rev</th>
						</tr>
					
					</thead>
					<tbody>
						@foreach (var item in Model)
						{
							<tr>
								<td>
									<label class="me-3">
										<input type="checkbox" class="form-check-input row-checkbox" data-id="@item.Id" />
									</label>
								</td>
								<td>
									<button class="btn btn-sm btn-outline-primary btn-copy" data-id="@item.Id">
										<i class="fas fa-copy"></i>
									</button>
									<button class="btn btn-sm btn-outline-primary btn-add-line" data-id="@item.Id">
										<i class="fas fa-plus"></i>
									</button>
									<button class="btn btn-sm btn-outline-primary btn-update" data-lineRev="@item.Revision" data-line-id="@item.LineId">
										<i class="fas fa-file-import"></i>
									</button>
								</td>
								<td>@item.CheckedOutBy</td>
								<td>@item.SpecificationName</td>
								<td>
									@* @if (item.IsValid)
									{
										<i class="fas fa-check fa-stack-1x" style="color: green;"></i>
									}
									else
									{
										<i class="fas fa-exclamation-triangle" style="color: orange;"></i>
									} *@
								</td>
								<td>@item.ParentChild</td>
								<td>@item.AreaName</td>
								<td>@item.LocationName</td>
								<td>@item.CommodityName</td>
								<td>@item.PipeSpecificationName</td>
								<td>@item.SizeNpsPipeName</td>
								<td>@item.SequenceNumber</td>
								<td>@item.LineStatusName</td>
								<td>@item.Revision</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>
</div>
<!-- Excel Upload Section -->
<div id="excelUploadSection" class="mt-3" style="display:none;">
	<div class="mb-2">
		<label for="excelFile" class="form-label">Select Excel File</label>
		<div class="d-flex">
			<input type="file" id="excelFile" accept=".xlsx,.xls" class="form-control me-2">
		</div>
	</div>
	<div>
		<button id="saveExcel" class="btn btn-success me-2">Save</button>
		<button id="cancelExcel" class="btn btn-secondary">Cancel</button>
	</div>
</div>
<!-- Modal -->
<div class="modal fade" id="lineCollectionModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title page-header"></h5>
				<button type="button" class="close" data-bs-dismiss="modal">&times;</button>
			</div>
			<div class="modal-body" id="modalContent"></div>
		</div>
	</div>
</div>

<!-- Modal container for the Reserve Lines popup -->
<div class="modal fade" id="reserveLinesModal" tabindex="-1" aria-labelledby="reserveLinesModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content" id="reserveLinesModalContent">
			<!-- The partial view will be loaded here via AJAX -->
		</div>
	</div>
</div>

<div class="modal fade" id="moveLinesModal" tabindex="-1" aria-labelledby="moveLinesLabel" aria-hidden="true">
	<div class="modal-dialog modal-xs">
		<div class="modal-content" id="moveLinesModalContent">
			<div class="modal-header">
				<h5 class="modal-title page-header"></h5>
				<button type="button" class="close" data-bs-dismiss="modal">&times;</button>
			</div>
			<div class="modal-body" id="modalContent"></div>
		</div>
	</div>
</div>


@section Scripts {
	<script>
		$(document).ready(function () {
			initializeDataTable();
			table.on('draw', function () { updateMoveButtons(); });
			setupEventHandlers();
			  toastr.options = {
			  positionClass: 'toast-bottom-right',
			  timeOut: 3000,
			  closeButton: true,
			  progressBar: true,
			  preventDuplicates: true
			};
			if ($("#showActiveOnly").is(":checked")) {
				filterActiveRecords();
			}

									var table = $('#dataTable').DataTable();
									// Handle select-all checkbox
									$(document).on('change', '#select-all', function () {
									//$('#select-all').on('change', function () {
										//var isChecked = $(this).is(':checked');
										var isChecked = $(this).prop('checked');

										$('.row-checkbox').prop('checked', isChecked);

										var table = $('#dataTable').DataTable();
										if (isChecked) {
											table.rows().select();
										} else {
											table.rows().deselect();
										}

											updateSelectAllCheckbox()
									});

									// Handle individual checkbox click
									$(document).on('change', '.row-checkbox', function () {
										let $checkbox = $(this);
										let row = $checkbox.closest('tr');
										//const table = $('#dataTable').DataTable();
										let rowIndex = table.row(row).index();

										if ($checkbox.is(':checked')) {
											table.row(rowIndex).select();
										} else {
											table.row(rowIndex).deselect();
										}

										updateSelectAllCheckbox()
									});

									// Function to keep the "select-all" checkbox in sync
									function updateSelectAllCheckbox() {
										const totalCheckboxes = $('.row-checkbox').length;
										const checkedCheckboxes = $('.row-checkbox:checked').length;

										if (checkedCheckboxes === totalCheckboxes) {
											$('#select-all').prop('checked', true);
										} else {
											$('#select-all').prop('checked', false);
										}
									}
									$('#dataTable').on('draw.dt', function () {
										updateSelectAllCheckbox()
									});
			// Handle search button click
			$(document).on('click', '#btnSearch', function (e){
				e.preventDefault(); // Prevent default form submission

				let formData = $('form').serialize(); // Serialize form data

				$.ajax({
					url: '@Url.Action("SearchResult", "LineCollection")', // Update with your actual controller
					type: 'POST',
					data: formData,
					success: function (response) {

						console.log(response);
						 initializeExistingLinesDataTable(response);
						 setupSelectAllCheckbox('#exisitnglinesDataTable');
					},
					error: function (xhr, status, error) {
						console.error("Error fetching data:", error);
					}
				});
			});

		$(document).on('click', '#btnIncludeLine', function (e) {
			e.preventDefault();

			var selectedIds = [];
			$('#exisitnglinesDataTable .select-checkbox:checked').each(function () {
			var lineId = $(this).data('id');
			if (lineId) {
				selectedIds.push(lineId);
			}
			});

			if (selectedIds.length === 0) {
			alert("Please select at least one line to include.");
			return;
			}

			var isReference = getQueryParam("tab") === "2";
			var lineListRevisionId = '@(Model.Any() ? Model.First().LineListRevisionId.ToString() : Guid.Empty.ToString())';

			$.ajax({
				url: '/LineCollection/IncludeSelectedLines',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify({
					existingLineIds: selectedIds,
					lineListRevisionId: lineListRevisionId,
					userName: '@User.Identity.Name',
					isReferenceLine: isReference
				}),
				success: function (response) {
					alert("Lines successfully included.");
					$('#lineCollectionModal').modal('hide');
					setTimeout(() => {
						location.reload();
					}, 1000);
				},
				error: function (xhr) {
					alert("Something went wrong: " + xhr.responseText);
				}
			});
		});
		function getQueryParam(name) {
			const urlParams = new URLSearchParams(window.location.search);
			return urlParams.get(name);
		}

			$('#documentNumberDropdown, #epProjectDropdown, #locationDropdown, #lineStatusDropdown, #epCompanyDropdown, #specificationsDropdown, #projectTypeDropdown, #cenovusProjectDropdown, #facilityDropdown')
				.change(function () {
					loadDependentDropdowns();
				});

			function loadDependentDropdowns() {
				var requestData = {
					facilityId: $('#facilityDropdown').val(),
					cenovusProjectId: $('#cenovusProjectDropdown').val(),
					projectTypeId: $('#projectTypeDropdown').val(),
					specificationsId: $('#specificationsDropdown').val(),
					epCompanyId: $('#epCompanyDropdown').val(),
					lineStatusId: $('#lineStatusDropdown').val(),
					locationId: $('#locationDropdown').val(),
					epProjectId: $('#epProjectDropdown').val(),
					documentNumberId: $('#documentNumberDropdown').val()
				};

				$.ajax({
					url: '@Url.Action("GetDependentDropdowns", "DropdownCommon")',
					type: 'GET',
					data: requestData,
					success: function (response) {
						updateDropdown('#documentNumberDropdown', response.documentNumbers);
						updateDropdown('#epProjectDropdown', response.epProjects);
						updateDropdown('#locationDropdown', response.locations);
						updateDropdown('#specificationsDropdown', response.specifications);
						updateDropdown('#cenovusProjectDropdown', response.cenovusProjects);
						updateDropdown('#pipeSpecificationsDropdown', response.pipeSpecifications);
					},
					error: function () {
						alert("Failed to load dependent dropdowns.");
					}
				});
			}

			function updateDropdown(dropdownId, data) {
				var dropdown = $(dropdownId);
				dropdown.empty().append('<option value="">-- Select --</option>');
				$.each(data, function (index, item) {
					dropdown.append($('<option></option>').val(item.id).text(item.name + " - " + item.description));
				});
			}
		});

		$(document).on('click', '#toggleFiltersLines', function () {
			$('.filter-row-lines').toggle();
		});

		//hide the search toggle in datatable
		$('.filter-row').hide();


		//Toggle filter button click
		$('#toggleFilters').click(function () {
			$('.filter-row').toggle();
		});


		function filterActiveRecords() {
			var showActiveOnly = $('#showActiveOnly').prop('checked');

			if (showActiveOnly) {
					table.column(4).search("^Yes$", true, false).draw(); 
				} else {
					table.column(4).search("").draw(); 
				}
			}

		function initializeDataTable() {
			let tableHeight = window.innerHeight - 150; 

			window.table = $('#dataTable').DataTable({
				dom: 'Brtlip',
			   orderCellsTop: true,  order: [[1, 'asc']],
				scrollY: '58vh',
				scrollX: true,
				scrollCollapse: true, 
				paging: false, 
				autoWidth: false,
				responsive: true,
				fixedHeader: true,
				select: { style: 'single' },
				buttons: [{
					extend: 'excel',
					text: 'Export to Excel', title: null,filename: 'LookupTable',customize: customizeExcelExport,
					className: 'btn btn-primary export-button',
					filename: function () {
						const now = new Date();
						const timestamp = now.toISOString().replace(/[-T:.Z]/g, '');
						return 'export-' + timestamp;
					},
					exportOptions: {
						columns: ":not(:first-child)",
						modifier: {
							search: "applied",
							 order: "applied", selected: null
						}
					}
				}],
		columnDefs: [
					{ targets: 0, width: '120px', orderable: false },
					{ targets: 1, width: '120px' },
					{ targets: 2, width: '40px' },
					{ targets: 3, width: '40px' },
					{ targets: 4, width: '20px' },
					{ targets: 5, width: '40px' },
					{ targets: 6, width: '40px' },
					{ targets: 7, width: '40px' },
					{ targets: 8, width: '40px' },
					{ targets: 9, width: '40px' },
					{ targets: 10, width: '40px' },
					{ targets: 11, width: '40px' },
					{ targets: 12, width: '40px' },
					{ targets: 13, width: '40px' }
				],
				initComplete: function () {
					let table = this;
					this.api().columns().every(function (index) {
						if (index === 0) return;
						$('input', $('#searchInputs th').eq(index)).on('keyup change', function () {
							table.api().column(index).search(this.value).draw();
							this.header().style.width = this.width() + "px";

						});
					});
				}
			});
		}

				function initializeExistingLinesDataTable(data) {
			// Destroy the existing DataTable if it exists, before initializing a new one
			if ($.fn.dataTable.isDataTable('#exisitnglinesDataTable')) {
				$('#exisitnglinesDataTable').DataTable().clear().destroy();
			}

			// Now initialize the DataTable with the fetched data
			window.exisitnglinesDataTable = $('#exisitnglinesDataTable').DataTable({
				dom: 'rtlip',
				orderCellsTop: true,
				order: [[1, 'asc']],
				scrollY: '53vh',
				scrollX: true,
				scrollCollapse: true,
				paging: false,
				autoWidth: false,
				responsive: false,
				fixedHeader: true,
				select: { style: 'single' },
				data: data,  // The data returned from the server
				columns: [
					{ data: null, orderable: false, searchable: false, render: function (data, type, row) {
						return `<input type="checkbox" class="form-check-input select-checkbox" data-id="${row.id}" />`;
					}},
					{ data: "parentChild", title: "P/C" },
					{ data: "locationName", title: "Location" },
					{ data: "pipeSpecificationName", title: "Pipe Spec" },
					{ data: "commoditiyName", title: "Commodity" },
					{ data: "sizeNpsName", title: "Size NPS" },
					{ data: "sequenceNumber", title: "Seq #" },
					{ data: "areaName", title: "Area" },
					{ data: "specificationName", title: "Spec" },
					{ data: "lineStatusName", title: "Line Status" },
					{ data: "modularId", title: "MIN" },
					{ data: "documentNumber", title: "Document" },
					{ data: "documentRevision", title: "Revision" },
					{ data: "lineListStatusName", title: "Status" }
				],
				columnDefs: [
					{ targets: 0, width: '120px' }
				]
			});
		}

						function setupSelectAllCheckbox(tableSelector) {
							let $table = $(tableSelector);
							let tableInstance = $table.DataTable();

							// Handle select-all checkbox
							$(document).on('change', '#selectAllLinesCheckbox', function () {
								let isChecked = $(this).is(':checked');
								$('.select-checkbox').prop('checked', isChecked);

								//let table = $('#exisitnglinesDataTable').DataTable();								
								if (isChecked) {
									tableInstance.rows().select(); // <-- triggers DataTables selection
								} else {
									tableInstance.rows().deselect();
								}
							});

							// Handle individual checkbox click
							$(document).on('change', '.select-checkbox', function () {
								let $checkbox = $(this);
								let row = $checkbox.closest('tr');
								//let table = $('#exisitnglinesDataTable').DataTable();

								let rowIndex = tableInstance.row(row).index();

								if ($checkbox.is(':checked')) {
									tableInstance.row(rowIndex).select();
								} else {
									tableInstance.row(rowIndex).deselect();
								}

								// Update master checkbox
								const all = $('.select-checkbox').length;
								const checked = $('.select-checkbox:checked').length;
								$('#selectAllLinesCheckbox').prop('checked', all > 0 && all === checked);
							});

							// Keep "select all" in sync on draw
							$table.on('draw.dt', function () {
								const all = $('.select-checkbox').length;
								const checked = $('.select-checkbox:checked').length;
								$('#selectAllLinesCheckbox').prop('checked', all > 0 && all === checked);
							});
						}


		function setupEventHandlers() {
			// ONLY SHOW ACTIVE line collections
			$('#showActiveOnly').on('change', function () {
				filterActiveRecords();
			});

			// Export to Excel
			$('#exportExcel').on('click', function () {
				table.button(0).trigger();
			});
			$('#gridExport').on('click', function () {
				table.button(0).trigger();
			});

			// Open Create Line Collection Modal
			$('#btnCreateNew').on('click', function () {
				openLineCollectionModal('Create', '/LineCollection/Create');
			});
			// Open Update Line Collection Modal (Event Delegation)
			$(document).on('click', '.btn-update', function () {
				let lineId = $(this).data("line-id");
				var lineRev = $(this).attr("data-lineRev");
				openLineCollectionModal('Update', '/LineCollection/Update?' + $.param({ lineId: lineId,lineRev: lineRev}));
			});

			// Open Create Line Collection Modal
			$('#includeExistingLines').on('click', function () {
				var lineListRevisionId = '@(Model.Any() ? Model.First().LineListRevisionId.ToString() : Guid.Empty.ToString())';
				openLineCollectionModal('IncludeExistingLines', '/LineCollection/IncludeExistingLines?' + $.param({ lineListRevisionId: lineListRevisionId}));
			});

			$('#projectReservedLineList').on('click', function () {
				let lineListRevisionId = '@(Model.Any() ? Model.First().ReservedLineListRevisionId.ToString() : Guid.Empty.ToString())';
				window.location.href = '/LineCollection/Index?'+ $.param({ lineListRevisionId: lineListRevisionId});
			});

			// Delete Line Collection
			$(document).on('click', '.btn-delete', function () {
				let lineCollectionId = $(this).data("id");
				if (confirm("Are you sure you want to delete this line collection?")) {
					$.ajax({
						url: "/LineCollection/Delete/" + lineCollectionId,
						type: "DELETE",
						success: function (response) {
							if (response.success) {
								showToast("Record deleted successfully", "success");
								location.reload();
							} else {
								showToast("Error deleting record", "error");
								alert(response.ErrorMessage || "Error deleting line collection.");
							}
						},
						error: function (error) {
							showToast("Error deleting record", "error");
						}
					});
				}
			});

			// Submit Create/Update Form
			$(document).on('click', '#btnSaveLineCollection', function (e) {
				e.preventDefault();
				let form = $("#lineCollectionForm");
				var formData=form.serialize();

				//if (form.valid()) {
					$.ajax({
						url: form.attr("action"),
						type: "POST",
						data: form.serialize(),
						success: function (response) {
							if (response.success) {
								$('#lineCollectionModal').modal('hide');
								showToast("Record saved successfully", "success", function () {
									setTimeout(() => {
										location.reload();
									}, 1000);
								});
							} else {
								showToast("Error saving record", "error");
							}
						},
						error: function (error) {
							showToast("Error saving record", "error");
						}
					});
				//}
			});

			$(document).on('click', '#reserveLines', function (e) {
				e.preventDefault(); // Prevent default navigation
				var lineListRevisionId = '@ViewBag.LineListRevisionId';
				console.log("Opening Reserve Lines modal for LineListRevisionId:", lineListRevisionId);

				// Load the ReserveLines partial view via AJAX
				$.ajax({
					url: '@Url.Action("ReserveLines", "LineCollection")',
					type: 'GET',
					data: { lineListRevisionId: lineListRevisionId },
					success: function (data) {
						console.log("Loaded ReserveLines partial view:", data);
						$('#reserveLinesModalContent').html(data);
						$('#reserveLinesModal').modal('show');
						// setTimeout(() => {
						// location.reload();
						// }, 500);
					},

					error: function (xhr, status, error) {
						console.error("Error loading ReserveLines partial view:", {
							status: status,
							error: error,
							responseText: xhr.responseText,
							statusCode: xhr.status
						});
						toastr.error("Error loading Reserve Lines form. Check the console for details.");
					}
				});
			});

			function validateRequiredFields() {
			let valid = true;
			$('#validationMsg, #validationMsgRange, #validationMsgExists').hide();
			const loc = $('#locationDropdown').val(),
				  com = $('#commodityDropdown').val(),
				  num = parseInt($('#NumberOfLines').val() || 0, 10),
				  start = parseInt($('#StartingLineSequence').val() || 1, 10);
			if (!loc || !com || num < 1) {
				$('#validationMsg').show();
				valid = false;
			} else if (start + num - 1 > 9999) {
				$('#validationMsgRange').show();
				valid = false;
			} else if (num > 199 && !confirm("Reserving over 200 lines may take a while. Continue?")) {
				valid = false;
			}
			return valid;
		}

		function hideValidation() {
			$('#validationMsg, #validationMsgRange, #validationMsgExists').hide();
			$('#hiddenOverride').val('');
		}


		// delegate the submit of the dynamically‐loaded form
		$(document).on('submit', '#reserveLinesForm', function(e) {
		  e.preventDefault();
		  if (!validateRequiredFields()) return;

		  let $form = $(this);
		  $.ajax({
			url: $form.attr('action'),
			method: 'POST',
			data: $form.serialize(),
			beforeSend: ()=> $('body').css('cursor','wait'),
			success: function(res) {
			  if (res.success) {
				$('#reserveLinesModal').modal('hide');
				window.location = '@Url.Action("Index", "LineCollection")?lineListRevisionId='
								 + $form.find('[name="LineListRevisionId"]').val();
			  }
			  else if (res.sequenceOverlap) {
				$('#validationMsgExists').show();
				$('#hiddenOverride').val('True');
			  }
			  else {
				showToast(res.errorMessage, 'error');
			  }
			},
			error: (xhr)=> showToast("Error reserving lines", 'error'),
			complete: ()=> $('body').css('cursor','default')
		  });
		});

			$(document).on('click', '#checkOut', function (e) {
				e.preventDefault();
			var selectedItems = getSelectedItems(); 

				if (selectedItems.length === 0) {
					alert("No lines selected: Select one or more rows to check out.");
					return;
				}

				$.ajax({
					url: '/LineCollection/CheckOutLines',
					method: 'POST',
					contentType: 'application/json',
					data: JSON.stringify({
						lineIds: selectedItems
					}),
					success: function (response) {
						showToast(response.message);
						if (response.success) {
							location.reload(); 
						}
					},
					error: function (xhr) {
						var message = xhr.responseJSON?.message || "Error checking out lines.";
						showToast(message);
					}
				});
			});
	 
		// Open Concurrent Engineering Report
		// $('#concurrentEngineeringReport').on('click', function () {
		// 	openLineCollectionModal('IncludeExistingLines', '/LineCollection/IncludeExistingLines');
		// });
			$(document).on('click', '#concurrentEngineeringReport', function () {
				var lineListRevisionId = '@(Model.Any() ? Model.First().LineListRevisionId.ToString() : Guid.Empty.ToString())';
				if (lineListRevisionId === '@Guid.Empty.ToString()') {
					toastr.error("No valid Line List Revision ID available.");
					return;
				}
				window.location.href = '@Url.Action("ConcurrentEngineeringReport", "LineCollection")' + '?lineListRevisionId=' + encodeURIComponent(lineListRevisionId);
			});
		}

			$(document).on('click', '#checkIn', function (e) {
				e.preventDefault();
			var selectedItems = getSelectedItems();
			var lineListRevisionId = '@(Model.Any() ? Model.First().LineListRevisionId.ToString() : Guid.Empty.ToString())';

				if (selectedItems.length === 0) {
					showToast("Select one or more rows to check in.");
					return;
				}

				$.ajax({
					url: '/LineCollection/CheckInLines',
					method: 'POST',
					contentType: 'application/json',
					data: JSON.stringify({
						lineIds: selectedItems,
						lineListRevisionId: lineListRevisionId
					}),
					success: function (response) {
						showToast(response.message);
						if (response.success) {
							location.reload();
						}
					},
					error: function (xhr) {
						var message = xhr.responseJSON?.message || "Error checking in lines.";
						showToast(message);
					}
				});
			});
		// Function to get the selected rows
		function getSelectedItems() {
			var selectedItems = [];
			$('input[type="checkbox"]:checked[data-id]').each(function () {
				var itemId = $(this).data('id');
				if (itemId) {
					selectedItems.push(itemId);
				}
			});
			return selectedItems;
		}


		$(document).on('click', '.btn-copy', function (e) {
			e.preventDefault();
			var lineId = $(this).data('id');

			if (!lineId) {
				alert("Line ID not found.");
				return;
			}

			$.ajax({
				url: '/LineCollection/CopyLineId',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(lineId),
				success: function (response) {
					showToast(response.message);
				},
				error: function (xhr) {
					var msg = xhr.responseJSON?.message || "Error copying line.";
					showToast(msg);
				}
			});
		});

		$(document).on('click', '.btn-add-line', function (e) {
			e.preventDefault();

			// Get the lineRevisionId from the data attribute of the button
			var lineRevisionId = $(this).data('id');

			// Perform the AJAX request
			$.ajax({
				url: '/LineCollection/CreateChildLine',
				type: 'POST',
				data: {
					lineRevisionId: lineRevisionId
				},
				success: function (response) {
					if (response.success) {
						showToast(response.message);
						location.reload(); // Reload the page upon success
					} else {
						showToast('Error: ' + response.message); // Display error message
					}
				},
				error: function (xhr) {
					var msg = xhr.responseJSON?.message || 'An error occurred while creating the child line.';
					showToast(msg);
				}
			});
		});

		$(document).on('click', '#pasteToSelected', function (e) {
			e.preventDefault();

			const selectedItems = getSelectedItems(); // Array of GUIDs

			if (selectedItems.length === 0) {
				alert("No lines have been selected to paste attribute data to.");
				return;
			}

			$.ajax({
				url: '/LineCollection/PasteLineAttributes',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify({ toLineIds: selectedItems }), // only send destination IDs
				success: function (response) {
					showToast(response.message);
					if (response.success) {
						location.reload();
					}
				},
				error: function (xhr) {
					var msg = xhr.responseJSON?.message || "Error pasting line attributes.";
					showToast(msg);
				}
			});
		});

		$(document).on('click', '#moveSelected', function (e) {
			e.preventDefault();

			const selectedIds = getSelectedItems();
			if (selectedIds.length === 0) {
				alert("You have no lines checked out and selected on this line list. Please checkout and select at least 1 line to move from this list.");
				return;
			}

			const lineListRevisionId = '@(Model.Any() ? Model.First().LineListRevisionId.ToString() : Guid.Empty.ToString())';
			//const url = '/LineCollection/MoveSelectedLines?lineListRevisionId=${lineListRevisionId}';			

			openMoveLinesModal('/LineCollection/MoveSelectedLines?' + $.param({ lineListRevisionId: lineListRevisionId}));
		});

		$(document).on('click', '#btnmoveLines', function (e) {
			e.preventDefault();

			const epProject = $('#SelectedEPProjectId').val();
			const lineList = $('#SelectedLineListId').val();
			const selectedItems = getSelectedItems();

			if (!epProject || !lineList) {				
				$('#validateMovelines').show();
			} else {
				$('#validateMovelines').hide();
			}

				$.ajax({
				url: '/LineCollection/MoveSelectedLines',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify({ toLineIds: selectedItems }), 
				success: function (response) {
					showToast(response.message);
					if (response.success) {
						location.reload();
					}
				},
				error: function (xhr) {
					var msg = xhr.responseJSON?.message || "Error moving lines.";
					showToast(msg);
				}
			});
		});
		$(document).on('click', '#discard', function (e) {
			e.preventDefault();
			var selectedIds = getSelectedItems();

			if (selectedIds.length === 0) {
				alert('Please select one or more rows to discard.');
				return;
			}

			if (!confirm("Are you sure you want to discard the selected line(s)?")) return;

			$.ajax({
				url: '/LineCollection/DiscardLines',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(selectedIds),
				success: function (response) {
					showToast('Lines discarded successfully.');
					location.reload(); 
				},
				error: function (xhr) {
					showToast(xhr.responseText || 'An error occurred while discarding lines.');
				}
			});
		});
		$(document).on('click', '#gridImport', function (e) {
			e.preventDefault();
			$('#mainLineSection').hide();
			$('#excelUploadSection').show();
		});
		$(document).on('click', '#cancelExcel', function (e) {
			e.preventDefault();
			$('#excelUploadSection').hide();
			location.reload();
			//$('#mainLineSection').show();
			$('#excelFile').val('');
		});


		$(document).on('click', '#Mechanical_Attributes', function (e) {
			e.preventDefault();

			let form = $("#lineCollectionForm");
				var formData=form.serialize();

			$.ajax({
				url: '/LineCollection/GetMechanicalDefaults',
				type: 'POST',
				data: formData,
				contentType: false,
				processData: false,
				success: function (response) {
					showToast("Import successful.");
					$("#excelUploadSection").modal("hide");
					location.reload();
				},
				error: function () {
					showToast("Import failed. Please try again.");
				}
			});
			 
			//$('#excelFile').val('');
		});	

		$(document).on('click', '#saveExcel', function (e) {
					e.preventDefault();
			var fileInput = $("#excelFile")[0];
			if (fileInput.files.length === 0) {
				alert("Please select an Excel file.");
				return;
			}
			var lineListRevisionId = '@(Model.Any() ? Model.First().LineListRevisionId.ToString() : Guid.Empty.ToString())';

			var formData = new FormData();
			formData.append("file", fileInput.files[0]);
			formData.append("lineListRevisionId", lineListRevisionId);

			$.ajax({
				url: '/LineCollection/ImportLines', 
				type: 'POST',
				data: formData,
				contentType: false,
				processData: false,
				success: function (response) {
					showToast("Import successful.");
					$("#excelUploadSection").modal("hide");
					location.reload();
				},
				error: function () {
					showToast("Import failed. Please try again.");
				}
			});
		});

		// }

		function openLineCollectionModal(action, url) {
				  let modal = $('#lineCollectionModal');
			   //let title = action === 'Create' ? 'Add a New Line Collection' : 'Update Line Collection';

			   $.get(url, function (response) {
				   $("#modalContent").html(response);
				   //$(".modal-title").text(title);
				   $.validator.unobtrusive.parse("#modalContent");
					  clearOperatingModeForm();
				   modal.modal('show');
				   $('.filter-row-lines').hide();
				   //initializeExistingLinesDataTable();
			   }).fail(function () {
				   alert("Error loading form.");
			   });
		   }
		//Line Details Page button Clicks and related setupEventHandlers
			function clearOperatingModeForm() {
		  $('#altOpId, #lineRevisionId').val('');
		  $('#OperatingPressure, #AltOperatingTemp, #AltLineRoutingFrom, #AltLineRoutingTo, #AltNotes, #AltHoopStressLevel, #AltPipeMaterialSpec')
			.val('');
		  $('#AltSourService').prop('checked', false);

		  $('#modeType, #AltCode, #AltFluid, #AltCsaHvpLvp, #AltCSAClassLocation, #AltPressureProtection, #absaRegistration')
			.prop('selectedIndex', 0);

		  $('#altOpModeFields, #csaFields').find('input, select, textarea').prop('disabled', true);
		  $('#btnSaveAltOp, #btnDeleteAltOp').prop('disabled', true);
		}

		// 3a) ADD NEW
		$(document).on('click', '#btnAddAltOp', function(e) {
		  e.preventDefault();
		  clearOperatingModeForm();
		  $('#altOpModeSection').removeClass('d-none').slideDown();
		  $('#altOpModeFields, #csaFields').find('input,select,textarea').prop('disabled', false);
		  $('#btnSaveAltOp').prop('disabled', false);
		});

		// 3b) EDIT
		$(document).on('click', '.btn-operating-mode-edit', function(e) {
		  e.preventDefault();
		  clearOperatingModeForm();
		  const id = $(this).data('id');
		  $.get('@Url.Action("GetOperatingMode", "LineCollection")', { id }, function(dto) {
			if (!dto) return;
			$('#altOpId').val(dto.id);
			$('#lineRevisionId').val(dto.lineRevisionId);
			$('#modeType').val(dto.operatingModeId);
			$('#OperatingPressure').val(dto.operatingPressurePipe);
			$('#AltOperatingTemp').val(dto.operatingTemperaturePipe);
			$('#AltLineRoutingFrom').val(dto.lineRoutingFrom);
			$('#AltLineRoutingTo').val(dto.lineRoutingTo);
			$('#AltNotes').val(dto.notes);
			$('#AltCode').val(dto.codeId);
			$('#AltPressureProtection').val(dto.pressureProtectionId);
			$('#absaRegistration').val(dto.isAbsaRegistration ? 'Yes' : 'No');
			$('#AltFluid').val(dto.fluidId);
			$('#AltCsaHvpLvp').val(dto.csaHvpLvpId);
			$('#AltHoopStressLevel').val(dto.hoopStressLevel);
			$('#AltCSAClassLocation').val(dto.csaClassLocationId);
			$('#AltPipeMaterialSpec').val(dto.pipeMaterialSpecification);
			$('#AltSourService').prop('checked', dto.isSourService);

			$('#altOpModeSection').removeClass('d-none').slideDown();
			$('#altOpModeFields, #csaFields').find('input,select,textarea').prop('disabled', false);
			$('#btnSaveAltOp, #btnDeleteAltOp').prop('disabled', false);
		  });
		});

		// 3c) SAVE
		$(document).on('click', '#btnSaveAltOp', function(e) {
		  e.preventDefault();
		  const dto = {
			Id: $('#altOpId').val(),
			LineRevisionId: $('#lineRevisionId').val(),
			OperatingModeId: $('#modeType').val(),
			OperatingPressurePipe: $('#OperatingPressure').val(),
			OperatingTemperaturePipe: $('#AltOperatingTemp').val(),
			LineRoutingFrom: $('#AltLineRoutingFrom').val(),
			LineRoutingTo: $('#AltLineRoutingTo').val(),
			CodeId: $('#AltCode').val(),
			Notes: $('#AltNotes').val(),
			FluidId: $('#AltFluid').val(),
			CsaHvpLvpId: $('#AltCsaHvpLvp').val(),
			HoopStressLevel: $('#AltHoopStressLevel').val(),
			CsaClassLocationId: $('#AltCSAClassLocation').val(),
			PipeMaterialSpec: $('#AltPipeMaterialSpec').val(),
			SourService: $('#AltSourService').is(':checked'),
			PressureProtectionId: $('#AltPressureProtection').val(),
			IsAbsaRegistration: $('#absaRegistration').val() === 'Yes'
		  };
		  $.ajax({
			url: '@Url.Action("SaveOperatingMode", "LineCollection")',
			type: 'POST',
			contentType: 'application/json',
			data: JSON.stringify(dto)
		  }).done(r => {
			if (r.success) {
			  toastr.success('✅ Saved');
			  clearOperatingModeForm();
			} else {
			  toastr.error(r.errorMessage || 'Save failed');
			}
		  }).fail(xhr => {
			toastr.error(xhr.responseText || xhr.statusText);
		  });
		});

		// 3d) DELETE
		$(document).on('click', '#btnDeleteAltOp', function(e) {
		  e.preventDefault();
		  if (!confirm('Delete?')) return;
		  const id = $('#altOpId').val();
		  $.post('@Url.Action("DeleteOperatingMode", "LineCollection")',{ id })
			.done(r => {
			  if (r.success) location.reload();
			  else alert('Delete failed');
			});
		});


		function openMoveLinesModal(url) {
			let title = "Move Checked-out Lines to a Different Line List";
			let modal = $('#moveLinesModal');
			$.get(url, function (response) {
				$("#modalContent").html(response);
				$(".modal-title").text(title);
				//$.validator.unobtrusive.parse("#modalContent");
				$.validator.unobtrusive.parse($('#modalContent').find('form'));
				modal.modal('show');
				$('.filter-row-lines').hide();
			}).fail(function () {
				alert("Error loading form.");
			});
		}

		// Ensure the modal content is cleared when the modal is hidden
			$('#reserveLinesModal').on('hidden.bs.modal', function () {
				$('#reserveLinesModalContent').html('');
			});
	 // Line Details Page Button Logics
		$(document).on('click', '#btnMechanicalDefaults', function(e) {
			 e.preventDefault();
			 var modal = $('#modalContent');
			 var pipeSpecId = modal.find('select[name="PipeSpecificationId"]').val();
			 var sizeNpsId  = modal.find('select[name="SizeNpsPipeId"]').val();

			 $.ajax({
			   url: '@Url.Action("GetMechanicalDefaults", "LineCollection")',
			   type: 'POST',
			   data: { pipeSpecificationId: pipeSpecId, sizeNpsPipeId: sizeNpsId },
			   success: function(data) {
				 if (data.error) { alert(data.error); return; }
				 if (!modal.find('select[name="CorrosionAllowanceId"]').val()) {
				   modal.find('select[name="CorrosionAllowanceId"]')
						.val(data.corrosionAllowanceId).css('color','blue');
				 }
				 if (!modal.find('select[name="XRayId"]').val()) {
				   modal.find('select[name="XRayId"]')
						.val(data.xrayId).css('color','blue');
				 }
				 if (!modal.find('select[name="NDECategoryId"]').val()) {
				   modal.find('select[name="NDECategoryId"]')
						.val(data.ndeCategoryId).css('color','blue');
				 }
				 if (!modal.find('select[name="ScheduleId"]').val()) {
				   modal.find('select[name="ScheduleId"]')
						.val(data.scheduleId).css('color','blue');
				 }
			   },
			   error: function(xhr) {
				 alert('Error loading mechanical defaults: ' + xhr.responseText);
			   }
			 });
		   });

		// Tracing-Defaults button (replicates btnInsTracingDefaults_Click)
		$(document).on('click', '#btnInsTracingDefaults', function(e) {
		  e.preventDefault();
		  const modal = $('#modalContent');
		  const lineListRevisionId   = modal.find('input[name="LineListRevisionId"]').val();
		  const sizeNpsId            = modal.find('#cboSizeNPS').val();
		  const insulationTypeId     = modal.find('#InsulationTypeId').val();
		  const tracingDesignId      = modal.find('#TracingDesignId').val();
		  const insulationMaterialId = modal.find('#InsulationMaterialId').val();
		  const operatingTemp        = modal.find('input[name="OperatingTemp"]').val();

		  $.ajax({
			url: '@Url.Action("GetInsulationTracingDefaults", "LineCollection")',
			type: 'POST',
			data: {
			  lineListRevisionId,
			  sizeNpsId,
			  insulationTypeId,
			  tracingDesignId,
			  insulationMaterialId,
			  operatingTemp
			},
			success: function(data) {
			  if (data.error) { alert(data.error); return; }
			  // only overwrite if empty
			  const sel = modal;
			  if (!sel.find('#InsulationThicknessId').val()) {
				sel.find('#InsulationThicknessId')
				   .val(data.insulationThicknessId)
				   .css('color','blue');
			  }
			  if (!sel.find('#NumTracerId').val()) {
				sel.find('#NumTracerId')
				   .val(data.tracingDesignNumberOfTracersId)
				   .css('color','blue');
			  }
			  if (!sel.find('#TracingDesignHoldTemp').val()) {
				sel.find('#TracingDesignHoldTemp')
				   .val(data.tracingHoldTemp)
				   .css('color','blue');
			  }
			},
			error: function(xhr) {
			  alert('Error loading tracing defaults: ' + xhr.responseText);
			}
		  });
		});
				$(document).on('click', '#btnSetAllDefaults', function(e) {
		  e.preventDefault();
		  const modal = $('#modalContent');
		  const lineListRevisionId = modal.find('input[name="LineListRevisionId"]').val();

		  // 1) Mechanical defaults
		  const pipeSpecId = modal.find('select[name="PipeSpecificationId"]').val();
		  const sizeNpsId  = modal.find('select[name="SizeNpsPipeId"]').val();

		  $.ajax({
			url: '@Url.Action("GetMechanicalDefaults", "LineCollection")',
			type: 'POST',
			data: { pipeSpecificationId: pipeSpecId, sizeNpsPipeId: sizeNpsId },
			success: function(mData) {
			  // only overwrite if empty
			  if (!modal.find('select[name="CorrosionAllowanceId"]').val()) {
				modal.find('select[name="CorrosionAllowanceId"]')
					 .val(mData.corrosionAllowanceId).css('color','blue');
			  }
			  if (!modal.find('select[name="XRayId"]').val()) {
				modal.find('select[name="XRayId"]')
					 .val(mData.xrayId).css('color','blue');
			  }
			  if (!modal.find('select[name="NDECategoryId"]').val()) {
				modal.find('select[name="NDECategoryId"]')
					 .val(mData.ndeCategoryId).css('color','blue');
			  }
			  if (!modal.find('select[name="ScheduleId"]').val()) {
				modal.find('select[name="ScheduleId"]')
					 .val(mData.scheduleId).css('color','blue');
			  }

			  // 2) Tracing defaults
			  const insSizeId     = modal.find('#cboSizeNPS').val();
			  const insTypeId     = modal.find('#InsulationTypeId').val();
			  const tracingDesign = modal.find('#TracingDesignId').val();
			  const insMaterialId = modal.find('#InsulationMaterialId').val();
			  const opTemp        = modal.find('input[name="OperatingTemp"]').val();

			  $.ajax({
				url: '@Url.Action("GetInsulationTracingDefaults", "LineCollection")',
				type: 'POST',
				data: {
				  lineListRevisionId: lineListRevisionId,
				  sizeNpsId:          insSizeId,
				  insulationTypeId:   insTypeId,
				  tracingDesignId:    tracingDesign,
				  insulationMaterialId: insMaterialId,
				  operatingTemp:      opTemp
				},
				success: function(tData) {
				  if (!modal.find('#InsulationThicknessId').val()) {
					modal.find('#InsulationThicknessId')
						 .val(tData.insulationThicknessId).css('color','blue');
				  }
				  if (!modal.find('#NumTracerId').val()) {
					modal.find('#NumTracerId')
						 .val(tData.tracingDesignNumberOfTracersId).css('color','blue');
				  }
				  if (!modal.find('#TracingDesignHoldTemp').val()) {
					modal.find('#TracingDesignHoldTemp')
						 .val(tData.tracingHoldTemp).css('color','blue');
				  }
				},
				error: function(xhr) {
				  alert('Error loading tracing defaults: ' + xhr.responseText);
				}
			  });
			},
			error: function(xhr) {
			  alert('Error loading mechanical defaults: ' + xhr.responseText);
			}
		  });
		});
		
	</script>
}



