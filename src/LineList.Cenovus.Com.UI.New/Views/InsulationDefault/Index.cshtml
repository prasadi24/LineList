@using LineList.Cenovus.Com.API.DataTransferObjects.InsulationDefault
@model IEnumerable<InsulationDefaultResultDto>

<div class="mt-md-0">
    <div class="row">
        <div class="card mb-md-1">
            <div class="card-header">
                <h5 class="mb-3 page-header">Insulation Table Defaults</h5>
                <hr />
                <div class="d-flex justify-content-between align-items-center">
                    <button class="btn btn-primary" id="btnCreateNew">
                        <i class="fas fa-plus"></i> ADD NEW INSULATION TABLE DEFAULT
                    </button>
                    <div class="d-flex align-items-center">
                        <label class="me-3">
                            <input type="checkbox" id="showActiveOnly" checked class="form-check-input" data-toggle="tooltip" data-placement="right" title="Only Show Active Records" />
                            ONLY SHOW ACTIVE
                        </label>
                        <button id="exportExcel" class="btn btn-primary">
                            <i class="fas fa-file-excel"></i> EXPORT TO EXCEL
                        </button>
                    </div>
                </div>
            </div>
            <div class="table">
                <table id="dataTable" class="table">
                    <thead>
                        <tr>
                            <th><button id="toggleFilters" class="btn-primary custom-icon-hover"><i class="fas fa-search"></i></button> Actions</th>
                            <th>@Html.DisplayNameFor(model => model.First().Name)</th>
                            <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                            <th>@Html.DisplayNameFor(model => model.First().LinkToDocument)</th>
                            <th>Sort Order</th>
                            <th>@Html.DisplayNameFor(model => model.First().IsActive)</th>
                        </tr>
                        <tr id="searchInputs" class="filter-row">
                            <th></th>
                            <th><input type="text" class="form-control" placeholder="Name" /></th>
                            <th><input type="text" class="form-control" placeholder="Description" /></th>
                            <th><input type="text" class="form-control" placeholder="Link" /></th>
                            <th><input type="text" class="form-control" placeholder="Sort Order" /></th>
                            <th><input type="text" class="form-control" placeholder="Active" /></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-id="@item.Id" data-active="@item.IsActive.ToString().ToLower()">
                                <td>
                                    <span class="btn-tooltip-disabled" data-toggle="tooltip" data-placement="right" title="This action is not available when the list is not sorted by the 'Sort Order' column, or the item is the first or last item in t">
                                        <button class="btn btn-sm btn-outline-primary btn-move-up" data-id="@item.Id" data-toggle="tooltip" data-placement="right" title="Move Row Up">
                                            <i class="fas fa-arrow-up"></i>
                                        </button>
                                    </span>
                                    <span class="btn-tooltip-disabled" data-toggle="tooltip" data-placement="right" title="This action is not available when the list is not sorted by the 'Sort Order' column, or the item is the first or last item in t">
                                        <button class="btn btn-sm btn-outline-primary btn-move-down" data-id="@item.Id" data-toggle="tooltip" data-placement="right" title="Move Row Down">
                                            <i class="fas fa-arrow-down"></i>
                                        </button>
                                    </span>
                                    <button class="btn btn-sm btn-outline-primary btn-update" data-id="@item.Id" data-name="@item.Name" data-description="@item.Description" data-toggle="tooltip" data-placement="right" title="Details">
                                        <i class="fas fa-file-import"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-primary btn-table-details" data-id="@item.Id" data-name="@item.Name" data-toggle="tooltip" data-placement="right" title="Edit Table Details">
                                        <i class="fas fa-table"></i>
                                    </button>
                                </td>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.LinkToDocument))
                                    {
                                        <a href="@item.LinkToDocument" target="_blank">View Document</a>
                                    }
                                </td>
                                <td>@item.SortOrder</td>
                                <td>@(item.IsActive ? "Yes" : "No")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="insulationDefaultModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title page-header"></h5>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body" id="modalContent"></div>
        </div>
    </div>
</div>
<div class="modal fade" id="insulationDetailsModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <!-- Adjust size as needed -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Insulation Table Default:</h5>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body" id="insulationDetailsContent">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
         $(document).ready(function () {
             initializeDataTable();table.on('draw', function () { updateMoveButtons(); });
             setupEventHandlers();
             if ($("#showActiveOnly").is(":checked")) {
                 filterActiveRecords();
             }

             $.fn.dataTable.ext.search.push(function(settings,data,dataIndex){
                let isChecked=$("#showActiveOnly").is(":checked");
                let status = data[5];
                if(isChecked){
                    return status === 'Yes';
                }
                return true;
             })
         });

         $('.filter-row').hide();

         $('#toggleFilters').click(function () {
             $('.filter-row').toggle();
         });

         function filterActiveRecords() {
             var showActiveOnly = $('#showActiveOnly').prop('checked');
             if (showActiveOnly) {
                 table.column(5).search("^Yes$", true, false).draw();
             } else {
                 table.column(5).search("").draw();
             }
         }

         function initializeDataTable() {
             let tableHeight = window.innerHeight - 150;
             window.table = $('#dataTable').DataTable({
                 dom: 'Brtlip',
                 orderCellsTop: true, order: [[4, 'asc']],
                 scrollY: '53vh',
                 scrollX: true,
                 scrollCollapse: true,
                 paging: false,
                 autoWidth: false,
                 responsive: true,
                 fixedHeader: true,
                 select: { style: 'single' },
                 buttons: [{
                     extend: 'excel',
                     text: 'Export to Excel', title: null,filename: 'LookupTable',customize: customizeExcelExport,
                     className: 'btn btn-primary export-button',
                     exportOptions: {
                         columns: ":not(:first-child)",
                         modifier: {
                             search: "applied",
                              order: "applied", selected: null
                         }
                     }
                 }],
                 columnDefs: [
                     { targets: 0, orderable: false, searchable: false, width: '120px' },
                     { targets: 1, width: '100px' },
                     { targets: 2, width: '150px' },
                     { targets: 3, width: '200px' },
                     { targets: 4, width: '80px' },
                     { targets: 5, width: '50px' }
                 ],
                 initComplete: function () {
                     let table = this;
                     this.api().columns().every(function (index) {
                         if (index === 0) return;
                         $('input', $('#searchInputs th').eq(index)).on('keyup change', function () {
                             let colData = table.api().column(index).search(this.value).draw();
                             colData.filter(function(val){
                                 debugger
                                 return val==='123'})
                         });
                     });
                 }
             });
         }

         function setupEventHandlers() {
             $('#showActiveOnly').on('change', function () {
                 filterActiveRecords();
             });

             $('#exportExcel').on('click', function () {
                 table.button(0).trigger();
             });

             $('#btnCreateNew').on('click', function () {
                 openInsulationDefaultModal('Create', '/InsulationDefault/Create');
             });

             $(document).on('click', '.btn-update', function () {
                 let insulationDefaultId = $(this).data("id");
                   let name = $(this).data('name');
                      let desc= $(this).data('description');
                  openInsulationDefaultModal('Update', '/InsulationDefault/Update/' + insulationDefaultId, name, desc);
             });


             $(document).on('click', '#btnSaveInsulationDefault', function (e) {
                 e.preventDefault();
                 let form = $("#insulationDefaultForm");

                 if (form.valid()) {
                     $.ajax({
                         url: form.attr("action"),
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#insulationDefaultModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.ErrorMessage || "Error saving insulation default.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });

             $(document).on("click", ".btn-table-details", function () {
                let insulationDefaultId = $(this).data("id");
                let name = $(this).data('name');
                let desc= $(this).data('description');
                $.get(`/InsulationDefault/GetDetails/${insulationDefaultId}?type=D`, function (response) {
                    $("#modalContent").html(response);
                    $(".modal-title").text("Insulation Table Default: " + name);
                    $("#insulationDefaultModal").modal("show");
                }).fail(function () {
                    alert("Error loading insulation default details.");
                });
            });

              $(document).on("click", "#btnEditColumn", function () {
                    var id = $(this).data("id"); // Get ID from button
                 var type = "D"; // Or fetch dynamically if needed

                 $.get(`/InsulationColumn/Update?id=${id}&type=${type}`, function (data) {
                     $("#mainPopup").hide();
                     $("#dynamicContent").html(data); // Load _Update.cshtml
                 });
                 });

                      $(document).on("click", "#btnEditRow", function () {
                        var id = $(this).data("id"); // Get ID from button
                         var type = "D"; // Or fetch dynamically if needed

                         $.get(`/InsulationRow/Update?id=${id}&type=${type}`, function (data) {
                             $("#mainPopup").hide();
                             $("#dynamicContent").html(data); // Load _Update.cshtml
                         });
                     });

              $(document).on('click', '.btn-delete', function () {
             let insulationDefaultId = $(this).data("id");  // Get ID of the item to delete
             if (confirm('Are you sure you want to delete this insulation default: ' +  $(this).data("name") + '?')) {
                 $.ajax({
                     url: "/InsulationDefault/Delete/" + insulationDefaultId,  // URL to delete the record
                     type: "DELETE",  // Type of request
                     success: function (response) {
                         if (response.success) {
                             location.reload();  // Reload the page to reflect changes
                         } else {
                             alert(response.ErrorMessage || "Cannot delete this record—it’s in use by another table.");
                         }
                     },
                     error: function (error) {
                         console.error("Error deleting insulation default:", error);
                         alert("An error occurred while deleting.");
                     }
                 });
             }
         });

           $(document).on('click', '.btn-delete-ins-details', function () {
             let insulationDefaultId = $(this).data("id");  // Get ID of the item to delete
             if (confirm('Are you sure you want to delete this detail record?')) {
                 $.ajax({
                     url: "/InsulationDefaultDetails/Delete/" + insulationDefaultId,  // URL to delete the record
                     type: "DELETE",  // Type of request
                     success: function (response) {
                         if (response.success) {
                             location.reload();  // Reload the page to reflect changes
                         } else {
                             alert(response.ErrorMessage || "Cannot delete this record—it’s in use by another table.");
                         }
                     },
                     error: function (error) {
                         console.error("Error deleting insulation default:", error);
                         alert("An error occurred while deleting.");
                     }
                 });
             }
         });

                  $(document).on("submit", "#updateForm", function (e) {
                     e.preventDefault();

                     $.ajax({
                         url: "/InsulationColumn/Update",
                         type: "POST",
                         data: $(this).serialize(),
                         success: function (response) {
                             if (response.success) {
                                 alert("Update Successful!");
                                 $("#dynamicContent").empty(); // Clear _Update.cshtml
                                 $("#mainPopup").show(); // Show old popup again
                             } else {
                                 alert(response.ErrorMessage);
                             }
                         }
                     });
                 });

                  $(document).on("click", "#btnCancelEditRowColumn", function () {
                     $("#dynamicContent").empty(); // Clear _Update.cshtml
                     $("#mainPopup").show(); // Show old popup again
                 });

             $(document).ready(function () {
                 $(document).on("click", ".open-modal", function (e) {
                     e.preventDefault(); // Prevent default page navigation

                     var url = $(this).data("url"); // Get the URL from data-url attribute

                     $.get(url, function (response) {
                         $("#insulationDetailsContent").html(response); // Load content into modal body
                         $("#insulationDetailsModal").modal("show"); // Show modal
                     }).fail(function () {
                         alert("Error loading details.");
                     });
                 });
             });

                 // Submit Create/Update Form
             $(document).on('click', '#btnInsDetailSave', function (e) {
                 e.preventDefault();
                 let form = $("#InsulationDetailsForm");

                 if (form.valid()) {
                     $.ajax({
                         url: "/InsulationDefaultDetails/Update",
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#insulationDetailsModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.ErrorMessage || "Error saving record.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });

              $(document).on('click', '.btn-update-nps', function () {
                 let row = $(this).closest('tr'); // Get the row
                 enableSizeNpsEditing(row);
             });

             // Handle saving the updated Size NPS value
             $(document).on('click', '.btn-save-nps', function () {
                 let row = $(this).closest('tr');
                 saveSizeNps(row);
             });

             // Handle cancel editing
             $(document).on('click', '.btn-cancel-nps', function () {
                 let row = $(this).closest('tr');
                 cancelSizeNpsEditing(row);
             });

              $(document).on('click', '.btn-update-temp', function () {
                 let row = $(this).closest('tr');
                 enableTemperatureEditing(row);
             });

             $(document).on('click', '.btn-save-temp', function () {
                 let row = $(this).closest('tr');
                 saveTemperature(row);
             });

             $(document).on('click', '.btn-cancel-temp', function () {
                 let row = $(this).closest('tr');
                 cancelTemperatureEditing(row);
             });

              $(document).on("click", "#btnCreateNewRow", function () {
                     if ($("#dataTableRow tbody tr.new-row").length > 0) return;
                 addNewRow();
             });

             // Handle saving the new row
             $(document).on("click", ".btn-save-new-row", function () {
                 let row = $(this).closest("tr");
                 saveNewRow(row);
             });

             // Handle canceling the new row
             $(document).on("click", ".btn-cancel-new-row", function () {
                 $(this).closest("tr").remove(); // Remove row on cancel
             });

             // Handle adding a new column
              $(document).on("click", "#btnCreateNewColumn", function () {
                 addNewColumn();
             });

             // Handle saving the new column
             $(document).on("click", ".btn-save-new-column", function () {
                 let col = $(this).closest("tr");
                 saveNewColumn(col);
                 // col.remove();
             });

             // Handle canceling the new column
             $(document).on("click", ".btn-cancel-new-column", function () {
                 $(this).closest("tr").remove(); // Remove column on cancel
             });

             // Submit Create/Update Form
             $(document).on('click', '#btnSaveRow', function (e) {
                 e.preventDefault();
                 let form = $("#rowForm");

                 if (form.valid()) {
                     $.ajax({
                         url: form.attr("action"),
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#rowModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.ErrorMessage || "Error saving record.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });
         }
         function enableSizeNpsEditing(row) {
                 let id = row.data("id");

                 if (row.hasClass("editing")) return;
                 row.addClass("editing");

                 let currentSizeNps = row.find("td:eq(2)").text().trim();

                 // Fetch dropdown options
                 $.get("/InsulationRow/GetSizeNpsOptions", function (data) {
                     let dropdown = `<select class="form-control size-nps-dropdown">`;
                     data.forEach(option => {
                         let selected = (option.name === currentSizeNps) ? "selected" : "";
                         dropdown += `<option value="${option.id}" ${selected}>${option.name}</option>`;
                     });
                     dropdown += `</select>`;

                     row.find("td:eq(2)").html(dropdown);

                     // Replace Update button with Save and Cancel buttons
                     row.find("td:eq(0)").html(`
                         <button class="btn btn-sm btn-primary btn-save-nps" data-id="${id}"><i class="fas fa-check"></i></button>
                         <button class="btn btn-sm btn-danger btn-cancel-nps"><i class="fas fa-times"></i></button>
                     `);
                 }).fail(function () {
                     alert("Error loading Size NPS options.");
                 });
             }


             function saveSizeNps(row) {
                 let id = row.data("id");
                 let insulationDefaultId = row.data("insulationdefaultid");
                 let selectedSizeNpsId = row.find("td:eq(2) select").val();
                 let selectedSizeNpsText = row.find("td:eq(2) select option:selected").text();
                 $.ajax({
                     url: "/InsulationRow/UpdateSizeNps",
                     type: "POST",
                     data: { Id: id, sizeNpsId: selectedSizeNpsId, insulationDefaultId:insulationDefaultId  },
                     success: function (response) {
                         if (response.success) {
                             // Update table with new Size NPS value
                             row.find("td:eq(2)").text(selectedSizeNpsText);

                             // Restore original Update button
                             row.find("td:eq(0)").html(`
                                 <button class="btn btn-sm btn-outline-primary btn-update-nps" data-id="${id}">
                                     <i class="fas fa-file-import"></i>
                                 </button>
                             `);

                             row.removeClass("editing");
                         } else {
                             alert(response.errorMessage);
                         }
                     },
                     error: function (error) {
                         console.error("Error updating Size NPS:", error);
                     }
                 });
             }

        function cancelSizeNpsEditing(row) {
                 let originalSizeNps = row.find("td:eq(2) select option:selected").text();

                 row.find("td:eq(2)").text(originalSizeNps);

                 // Restore original Update button
                 row.find("td:eq(0)").html(`
                     <button class="btn btn-sm btn-outline-primary btn-update-nps" data-id="${row.data("id")}">
                         <i class="fas fa-file-import"></i>
                     </button>
                 `);

                 row.removeClass("editing");
             }

             function enableTemperatureEditing(row) {
                 let id = row.data("id");

                 if (row.hasClass("editing")) return;
                 row.addClass("editing");

                 // Get current values
                 let minTemp = row.find("td:eq(2)").text().trim();
                 let maxTemp = row.find("td:eq(3)").text().trim();

                 // Replace text with input fields
                 row.find("td:eq(2)").html(`<input type="number" class="form-control temp-input" value="${minTemp}" oninput="validateInteger(this)">`);
                 row.find("td:eq(3)").html(`<input type="number" class="form-control temp-input" value="${maxTemp}" oninput="validateInteger(this)">`);

                 // Replace Update button with Save and Cancel buttons
                 row.find("td:eq(0)").html(`
                     <button class="btn btn-sm btn-primary btn-save-temp" data-id="${id}"><i class="fas fa-check"></i></button>
                     <button class="btn btn-sm btn-danger btn-cancel-temp"><i class="fas fa-times"></i></button>
                 `);
             }

             // Function to validate integer input
             function validateInteger(input) {
                 input.value = input.value.replace(/[^0-9-]/g, ''); // Allows only numbers and negative sign
             }

             function saveTemperature(row) {
                 let id = row.data("id");
                 let updatedMinTemp = row.find("td:eq(2) input").val().trim();
                 let updatedMaxTemp = row.find("td:eq(3) input").val().trim();

                 // Ensure values are valid integers
                 if (isNaN(updatedMinTemp) || isNaN(updatedMaxTemp) || updatedMinTemp === "" || updatedMaxTemp === "") {
                     alert("Please enter valid integer values for Min and Max Operating Temperature.");
                     return;
                 }

                 $.ajax({
                     url: "/InsulationColumn/UpdateTemperature",
                     type: "POST",
                     data: { Id: id, MinOperatingTemperature: updatedMinTemp, MaxOperatingTemperature: updatedMaxTemp },
                     success: function (response) {
                         if (response.success) {
                             // Update table with new values
                             row.find("td:eq(2)").text(updatedMinTemp);
                             row.find("td:eq(3)").text(updatedMaxTemp);

                             // Restore original Update button
                             row.find("td:eq(0)").html(`
                                 <button class="btn btn-sm btn-outline-primary btn-update-temp" data-id="${id}">
                                     <i class="fas fa-file-import"></i>
                                 </button>
                             `);

                             row.removeClass("editing");
                         } else {
                             alert(response.ErrorMessage || "Error updating temperatures.");
                         }
                     },
                     error: function (error) {
                         console.error("Error updating temperatures:", error);
                     }
                 });
             }

             function cancelTemperatureEditing(row) {
                 let originalMinTemp = row.find("td:eq(2) input").val();
                 let originalMaxTemp = row.find("td:eq(3) input").val();

                 row.find("td:eq(2)").text(originalMinTemp);
                 row.find("td:eq(3)").text(originalMaxTemp);

                 // Restore original Update button
                 row.find("td:eq(0)").html(`
                     <button class="btn btn-sm btn-outline-primary btn-update-temp" data-id="${row.data("id")}">
                         <i class="fas fa-file-import"></i>
                     </button>
                 `);

                 row.removeClass("editing");
             }

             // Function to add a new row inline
             function addNewRow() {
                 if ($("#dataTableRow tbody tr.new-row").length > 0) return; // Prevent multiple new rows

                 let insulationDefaultId = $("#dataTableRow tbody tr:first").data("insulationdefaultid")


                 $.get("/InsulationRow/GetSizeNpsOptions", function (data) {
                     let dropdown = `<select class="form-control size-nps-dropdown">`;
                     data.forEach(option => {
                         dropdown += `<option value="${option.id}">${option.name}</option>`;
                     });
                     dropdown += `</select>`;

                     let newRow = `
                         <tr class="new-row" data-insulationdefaultid="${insulationDefaultId}">
                             <td>
                                 <button class="btn btn-sm btn-primary btn-save-new-row"><i class="fas fa-check"></i> </button>
                                 <button class="btn btn-sm btn-danger btn-cancel-new-row"><i class="fas fa-times"></i> </button>
                             </td>
                             <td></td>
                             <td>${dropdown}</td>
                         </tr>
                     `;

                     $("#dataTableRow tbody").prepend(newRow); // Insert new row at the top
                 }).fail(function () {
                     alert("Error loading Size NPS options.");
                 });
             }

             // Function to save the new row
             function saveNewRow(row) {
                 let sizeNpsId = row.find(".size-nps-dropdown").val();
                 let insulationDefaultId = row.data("insulationdefaultid");

                 if (!sizeNpsId) {
                     alert("Please select a Size NPS.");
                     return;
                 }

                 $.ajax({
                     url: "/InsulationRow/CreateRow",
                     type: "POST",
                     data: { SizeNpsId: sizeNpsId, InsulationDefaultId: insulationDefaultId },
                     success: function (response) {
                         if (response.success) {

                             col.replaceWith(staticRow); // Replace editing row with the static row
                         } else {
                             alert(response.ErrorMessage || "Error adding row.");
                         }
                     },
                     error: function (error) {
                         console.error("Error adding row:", error);
                     }
                 });
             }

             // Function to add a new column inline
             function addNewColumn() {
                 if ($("#dataTableColumn tbody tr.new-column").length > 0) return; // Prevent multiple new columns

                  let insulationDefaultId = $("#dataTableColumn tbody tr:first").data("insulationdefaultid");

                 let newColumn = `
                     <tr class="new-column" data-insulationdefaultid="${insulationDefaultId}">
                         <td>
                             <button class="btn btn-sm btn-primary btn-save-new-column"><i class="fas fa-check"></i> </button>
                             <button class="btn btn-sm btn-danger btn-cancel-new-column"><i class="fas fa-times"></i> </button>
                         </td>
                         <td></td>
                         <td><input type="number" class="form-control min-temp-input" placeholder="Min Temp"></td>
                         <td><input type="number" class="form-control max-temp-input" placeholder="Max Temp"></td>
                     </tr>
                 `;

                 $("#dataTableColumn tbody").prepend(newColumn); // Insert new column at the top
             }

             // Function to save the new column
             function saveNewColumn(col) {
                 let minTemp = col.find(".min-temp-input").val().trim();
                 let maxTemp = col.find(".max-temp-input").val().trim();
                  let insulationDefaultId = col.data("insulationdefaultid");

                 if (minTemp === "" || maxTemp === "") {
                     showToast("Please enter Min and Max Temperature.", "warning");
                     return;
                 }

         $.ajax({
          url: "/InsulationColumn/CreateColumn",
          type: "POST",
          data: { InsulationDefaultId: insulationDefaultId, MinOperatingTemperature: minTemp, MaxOperatingTemperature: maxTemp },
          success: function (response) {
            if (!response.success) {
              var msg = response.errorMessage || response.ErrorMessage || "Error adding column.";
             return showToast(msg, "error");
            }
            // 1) remove our inline input row
            col.remove();

            // 2) prepend the new static row (use the returned ID if your CreateColumn returns it)
            var newId = response.id || ""; // adjust if your API returns the new column’s Id
            var rowCount = $('#dataTableColumn tbody tr').length + 1;
            var staticHtml =
              `<tr data-id="${newId}" data-insulationdefaultid="${insulationDefaultId}">
                 <td>
                   <button class="btn btn-sm btn-outline-primary btn-update-temp" data-id="${newId}">
                     <i class="fas fa-file-import"></i>
                   </button>
                 </td>
                 <td>${rowCount}</td>
                 <td>${minTemp}</td>
                 <td>${maxTemp}</td>
               </tr>`;
            $('#dataTableColumn tbody').prepend(staticHtml);
              // 3) re-load the entire <tbody> to pick up correct ordering & re-bind handlers
            $.get(`/InsulationColumn/Update/${insulationDefaultId}`, function(html) {
              var newTbody = $(html).find('#dataTableColumn tbody');
              $('#dataTableColumn tbody').replaceWith(newTbody);
            });
            showToast("Record saved successfully", "success");
          },
          error: function () {
            showToast("Error adding column.", "error");
          }
        });
             }

        function openInsulationDefaultModal(action, url,name, desc) {
            let modal = $('#insulationDefaultModal');
            let title = action === 'Create' ? 'Add a New Insulation Table Default' : 'Insulation :' + name + ' - '+ desc;

             $.get(url, function (response) {
                 $("#modalContent").html(response);
                 $(".modal-title").text(title);
                 $.validator.unobtrusive.parse("#modalContent");
                 modal.modal('show');
             }).fail(function () {
                 alert("Error loading form.");
             });
         }
    </script>
}
