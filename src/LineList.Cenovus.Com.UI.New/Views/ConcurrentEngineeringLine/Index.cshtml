@using LineList.Cenovus.Com.Domain.DataTransferObjects
@model ConcurrentEngineeringViewModel

<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<style type="text/css">
    html, body {
        height: 100%;
        overflow: hidden;
    }

    .card {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 130px); /* Adjust based on page layout (navbar, footer, etc.) */
    }

    .grid-container {
        flex: 1 1 auto;
        overflow-y: auto;
    }

    .dataTables_scrollBody {
        max-height: none !important;
    }
</style>
<div class="mt-md-0">
    <div class="row">
        <div class="card">

            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="page-header">Concurrent Engineering</h5>
                </div>
            </div>
            <div class="card-header bg-secondary search-box mb-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="text-uppercase text-white fw-bold" style="margin-bottom:0px;">SEARCH FOR MULTIPLE ACTIVE REVISIONS FOR A LINE</h5>
                    <a class="btn btn-primary ms-auto" data-bs-toggle="collapse" href="#searchPnl" role="button">
                        <i class="fas fa-chevron-down"></i> Toggle Search
                    </a>
                </div>
            </div>

            <!-- Collapsible Search Panel -->
            <div id="searchPnl" class="collapse show">
                <div class="card-body">
                    <form method="post" id="searchForm">
                        <!-- Row 1 -->
                        <div class="row mb-2">
                            <div class="col-md-6 d-flex align-items-center">
                                <label class="me-2 fw-bold w-50">Facility:</label>
                                <select asp-for="FacilityId" class="form-select" id="facilityDropdown" asp-items="@(new SelectList(Model.Facilities, "Id", "Name_dash_Description"))">
                                    <option value="">-- Select Facility --</option>
                                </select>
                                <span class="text-danger ms-1" title="Required Field">*</span>
                            </div>
                            <div class="col-md-6 d-flex align-items-center">
                                <label class="me-2 fw-bold w-50">Project:</label>
                                <select asp-for="EPProjectId" class="form-select" id="projectDropdown" asp-items="@(new SelectList(Model.EPProjects, "Id", "Name_dash_Description"))">
                                    <option value="">-- Select Project --</option>
                                </select>
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-4"></div>
                                    <div class="col-4 text-start">
                                        <label class="fw-bold">From</label>
                                    </div>
                                    <div class="col-4 text-start">
                                        <label class="fw-bold">To</label>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-4 pt-1">
                                        <label class="fw-bold mb-0">LDT Issue Date Range:</label>
                                    </div>
                                    <div class="col-4">
                                        <input type="date" class="form-control form-control-sm" asp-for="LDTFromDate" id="ldtFromDate" />
                                    </div>
                                    <div class="col-4">
                                        <input type="date" class="form-control form-control-sm" asp-for="LDTToDate" id="ldtToDate" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 mt-4">
                                <div class="row align-items-center">
                                    <label class="col-6 fw-bold">Only Show As-Built LDTs:</label>
                                    <div class="col-6">
                                        <input type="checkbox" asp-for="OnlyShowAsBuiltLDTs" id="showAsBuilt" class="form-check-input" />
                                    </div>
                                </div>
                            </div>

                        </div>

                        <!-- Action Buttons -->
                        <div class="row">
                            <div class="col-12 text-end">
                                <button type="reset" class="btn btn-outline-secondary me-2" id="clearCriteria">
                                    <i class="fas fa-times"></i> Clear Criteria
                                </button>
                                <button type="button" id="search" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                        </div>

                    </form>
                </div>
            </div>
            <hr />

            <!-- Export Button (Positioned Above the Grid) -->
            <div class="d-flex">
                <button id="exportExcel" class="btn btn-primary ms-auto">
                    <i class="fas fa-file-excel"></i> EXPORT TO EXCEL
                </button>
            </div>
          

            <!-- Table -->
            <div class="table grid-container flex-grow-1 overflow-auto">
                <table id="concurrentEngineeringTable" class="table">
                    <thead>
                        <tr>
                            <th><button id="toggleFilters" class="btn-primary custom-icon-hover"><i class="fas fa-search"></i></button></th>

                            <th>Spec</th>
                            <th>Line List <br />Actions</th>
                            <th>Document</th>
                            <th>Line List Status</th>
                            <th>LDT Issue<br />Date</th>
                            <th>Rev.</th>
                            <th>EP</th>
                            <th>Line <br />Actions</th>
                            <th>Line Num.</th>
                            <th>Line Rev.</th>
                            <th>Line Status</th>
                            <th>P/C</th>
                            <th>Active</th>
                        </tr>
                        <!-- Filter Inputs Row -->
                        <tr id="searchInputs" class="filter-row">
                            <th></th>

                            <th><input type="text" class="form-control" placeholder="Specification" /></th>
                            <th></th>
                            <th><input type="text" class="form-control" placeholder="Document Number" /></th>
                            <th><input type="text" class="form-control" placeholder="Line List Status" /></th>
                            <th><input type="text" class="form-control" placeholder="LDT Issue Date" /></th>
                            <th><input type="text" class="form-control" placeholder="Rev." /></th>
                            <th><input type="text" class="form-control" placeholder="EP" /></th>
                            <th></th>
                            <th><input type="text" class="form-control" placeholder="Line Num." /></th>
                            <th><input type="text" class="form-control" placeholder="Line Rev." /></th>
                            <th><input type="text" class="form-control" placeholder="Line Status" /></th>
                            <th><input type="text" class="form-control" placeholder="P/C" /></th>
                            <th><input type="text" class="form-control" placeholder="Active" /></th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Table content will be dynamically populated via AJAX -->
                    </tbody>
                </table>
            </div>
            <div class="row align-items-center mb-4 mt-1">
                <div class="col-md-8">
                    @if (Model.IsCenovusAdmin)
                    {
                        <label id="lblDeleteNotice" class="text-danger fw-bold">
                            Note: Changing a Line Revision to not Active cannot be manually un-done and should be performed with caution.
                        </label>
                    }
                </div>
                <div class="col-md-4 text-end">
                    <button type="reset" class="btn btn-outline-secondary me-2" id="btnReset">
                        <i class="fas fa-times"></i> Reset
                    </button>
                    <button type="button" id="saveBtn" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save
                    </button>
                </div>
            </div>

        </div>
    </div>
</div>
<!-- Modal for Create/Update -->
<div class="modal fade" id="LineListCreateModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title page-header"></h5>
                <button type="button" class="close" data-bs-dismiss="modal">×</button>
            </div>
            <div class="modal-body" id="modalContent"></div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {

             $('#searchPnl').on('shown.bs.collapse hidden.bs.collapse', function () {
            setTimeout(function () {
                $('#concurrentEngineeringTable').DataTable().columns.adjust().draw();
            }, 300); // wait for collapse animation to complete
           });
             $(window).on('resize', function () {
                $('#concurrentEngineeringTable').DataTable().columns.adjust().draw();
            });

            // Initialize DataTable (with no data until search is performed)
            var groupColumn = 9;
               var table = $('#concurrentEngineeringTable').DataTable({
                    dom: 'rtip',
                    orderCellsTop: true,  order: [[1, 'asc']],
                    paging: true,
                    pageLength: 250,
                    autoWidth: false,
                    responsive: true,
                    fixedHeader: true,
                    fixedFooter: true,
                    scrollY: 'calc(100vh - 500px)',
                    scrollX: true,
                    scrollCollapse: true,
                    columnDefs: [
                        { targets: 0, orderable: false, searchable: false, width: '120px' },
                        { targets: groupColumn, visible: false } // Hide group column
                    ],
                    initComplete: function () {
                        let table = this;
                        this.api().columns().every(function () {
                            let column = this;
                            let colIndex = column.index(); // Get the actual column index

                            // Skip columns that shouldn't have filters (Checkbox, Actions, etc.)
                            if ([0, 2, 8].includes(colIndex)) return;

                            let input = $('input', $('#searchInputs th').eq(colIndex));
                            if (input.length) {
                                input.on('keyup change', function () {
                                    let searchValue = this.value.trim();
                                    console.log(`Filtering Column ${colIndex}:`, searchValue); // Debug
                                    column.search(searchValue).draw();
                                });
                            }
                        });
                    },
                    order: [[groupColumn, 'asc']], // Sort initially by group column
                    drawCallback: function (settings) {
                        var api = this.api();
                        var rows = api.rows({ page: 'current' }).nodes();
                        var last = null;

                        api.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                            if (last !== group) {
                                $(rows).eq(i).before(
                                    `<tr class="group expanded" data-group="${group}">
                                        <td colspan="14" class="group-row">
                                            <button class="toggle-group btn btn-sm btn-light me-2">-</button>
                                            <strong>${group}</strong>
                                        </td>
                                    </tr>`
                                );
                                last = group;
                            }
                        });

                        // Ensure groups are expanded by default
                        $(".group").each(function () {
                            $(this).nextUntil(".group").show(); // Expand all groups by default
                        });
                    }
                });

                // Prevent sorting when clicking on a group row
                $('#concurrentEngineeringTable tbody').on('click', '.group-row', function (e) {
                    e.preventDefault(); // Prevent any default behavior
                    e.stopPropagation(); // Stop DataTables from sorting

                    var groupRow = $(this).closest(".group");
                    var groupValue = groupRow.attr("data-group");
                    var isExpanded = groupRow.hasClass("expanded");

                    if (isExpanded) {
                        groupRow.removeClass("expanded");
                        groupRow.find('.toggle-group').text("+"); // Change button to "+"
                        groupRow.nextUntil(".group").hide(); // Hide rows
                    } else {
                        groupRow.addClass("expanded");
                        groupRow.find('.toggle-group').text("-"); // Change button to "-"
                        groupRow.nextUntil(".group").show(); // Show rows
                    }
                });



            // Disable the table until a search is performed
            table.clear().draw();

            function groupTableByLineNumber() {
                var rows = table.rows({ page: 'current' }).nodes();
                var last = null;

                table.column(groupColumn, { page: 'current' }).data().each(function (group, i) {
                    if (last !== group) {
                        $(rows).eq(i).before('<tr class="group"><td colspan="14"><strong>' + group + '</strong></td></tr>');
                        last = group;
                    }
                });
            }


            function getCurrentDate() {
                let today = new Date();
                let yyyy = today.getFullYear();
                let mm = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based
                let dd = String(today.getDate()).padStart(2, '0');
                return `${yyyy}-${mm}-${dd}`;
            }

            // Set default date on input click if it's empty
            $("#ldtFromDate, #ldtToDate").on("focus", function () {
                if (!$(this).val()) {
                    $(this).val(getCurrentDate());
                }
            });
         
            // Handle the SEARCH button click to filter data
            $('#search').on('click', function () {
                var facilityId = $('#facilityDropdown').val();
                var projectId = $('#projectDropdown').val();
                var ldtFromDate = $('#ldtFromDate').val();
                var ldtToDate = $('#ldtToDate').val();
                var showAsBuilt = $('#showAsBuilt').prop('checked');
                const isCenovusAdmin = @Model.IsCenovusAdmin.ToString().ToLower();
                // Only perform the search if the facility or project is selected
                if (facilityId || projectId || ldtFromDate || ldtToDate || showAsBuilt) {
                    $.ajax({
                        url: '/ConcurrentEngineeringLine/ConcurrentEngineeringLineFeed',
                        method: 'GET',
                        data: {
                            facilityId: facilityId,
                            projectId: projectId,
                            ldtFromDate: ldtFromDate,
                            ldtToDate: ldtToDate,
                            showAsBuilt: showAsBuilt
                        },
                        success: function (response) {
                            if (response.data && Array.isArray(response.data)) {
                                console.log(response.data[0]); // Debug: Log first row to verify data structure
                                table.clear();

                                $.each(response.data, function (index, item) {
                                    let lineId = item.lineId;
                                    var lineRev =item.lineRevision;
                                    table.row.add([
                                        ' ',  // Column 0: Empty placeholder (if needed for checkboxes/icons)
                                        item.specification || '',     // Column 2: Specification
                                        item.lineListId
                                    ? `<a href="/LineList/Update/${item.lineListRevisionId}" class="open-modal" data-title="Line List Details">
                                          <img src="../img/page_go.png" alt="View" style="width:16px;height:16px;">
                                       </a>`
                                    : '',
                                        item.documentNumber || '',    // Column 4: Document Number
                                        item.lineListStatus || '',    // Column 5: Line List Status
                                        item.issuedOn ? item.issuedOn.split('T')[0] : '', // Column 6: LDT Issue Date (format YYYY-MM-DD)
                                        item.documentRevision || '',  // Column 7: Rev.
                                        item.ep || '',                // Column 8: EP
                                        item.lineId
                                    ? '<a href="/LineCollection/Update?' + $.param({ lineId: lineId, lineRev: lineRev }) + '" class="open-modal" data-title="Line List Revision">' +
                                      '<img src="../img/page_go.png" alt="Revision" style="width:16px;height:16px;">' +
                                      '</a>'
                                    : '',
                                        item.lineNumber || '',        // Column 10: Line Num.
                                        item.lineRevision || '',      // Column 11: Line Rev.
                                        item.lineStatus || '',        // Column 12: Line Status
                                        item.parentChild || '',        // Column 13: Line Status
                                        `${(item.isDraft)
                                            ? `<input type="checkbox" class="statusCheckbox" data-original="${item.isActive}" data-id="${item.id}" ${item.isActive ? 'checked' : ''} disabled />`
                                            : `<input type="checkbox" class="statusCheckbox" data-original="${item.isActive}" data-id="${item.id}" ${item.isActive ? 'checked' : ''} />`
                                        }`
                                    ]);
                                });

                                table.draw();
                            } else {
                                console.error("Unexpected response format:", response);
                                alert("Error: Unable to fetch data.");
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("AJAX Error:", error);
                            alert("An error occurred while fetching data.");
                        }
                    });
                } else {
                    alert("Please select at least one filter to search.");
                }
            });

            $(document).on('click', '.open-modal', function (e) {
                e.preventDefault();
                var url = $(this).attr('href');
                var title = $(this).data('title') || 'Details';

                openLineCollectionModal(title, url);

            });
            // Handle Clear Criteria Button Click
            $("#clearCriteria").click(function () {
                $("#searchForm")[0].reset(); // Reset form fields
                table.clear().draw(); // Clear the table data
            });

            $('#exportExcel').on('click', async function () {
                var workbook = new ExcelJS.Workbook();
                var worksheet = workbook.addWorksheet("Concurrent Engineering Lines");

                // Define headers
                var headers = [
                    "Specification", "Document Number", "Line List Status",
                    "LDT Issue Date", "Rev.", "EP", "Line Num.", "Line Rev.", "Line Status", "P/C","Active"
                ];

                let lastColumnIndex = headers.length; // Ensures styles apply only up to 'Active'

                // Add headers to worksheet
                let headerRow = worksheet.addRow(headers);

                // Apply styling only to header columns (not extra empty columns)
                headerRow.eachCell((cell, colNumber) => {
                    if (colNumber <= lastColumnIndex) { // Apply only to defined columns
                        cell.font = { bold: true, color: { argb: 'FFFFFF' } }; // White text
                        cell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: '244C5A' } // Dark teal background
                        };
                    }
                });

                let lastGroup = null;
                var data = $('#concurrentEngineeringTable').DataTable().rows({ search: 'applied' }).data().toArray();
                var groupColumnIndex = 6; // Adjust this if needed

                data.forEach((row, index) => {
                    let filteredRow = row.filter((_, i) => ![0, 2, 8].includes(i)).map((cell, i, arr) => {
                        if (i === arr.length - 1) {
                            return cell.includes('checked') ? 'Yes' : 'No'; // Convert checkbox to Yes/No
                        }
                        return $('<div>').html(cell).text(); // Strip HTML from all other cells
                    });
                    let groupValue = filteredRow[groupColumnIndex];

                    if (groupValue !== lastGroup) {
                        let groupRow = worksheet.addRow([`Line: ${groupValue}`]);

                        // Merge the group row from column A to the last column (Active)
                        worksheet.mergeCells(groupRow.number, 1, groupRow.number, lastColumnIndex);

                        // Apply background color and bold font to merged group row
                        let mergedCell = worksheet.getCell(groupRow.number, 1); // ✅ Fixed Reference
                        mergedCell.font = { bold: true };
                        mergedCell.fill = {
                            type: 'pattern',
                            pattern: 'solid',
                            fgColor: { argb: 'D3D3D3' } // Light gray background
                        };
                        mergedCell.alignment = { horizontal: 'center' }; // Center the text

                        lastGroup = groupValue;
                    }

                    worksheet.addRow(filteredRow); // Add normal data row
                });

                // Auto-size columns
                worksheet.columns.forEach(column => {
                    column.width = 20;
                });

                // Generate and download the file
                workbook.xlsx.writeBuffer().then(buffer => {
                    let blob = new Blob([buffer], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" });
                    saveAs(blob, "Concurrent_Engineering_Lines.xlsx");
                });
            });



            $('#concurrentEngineeringTable tbody').on('click', 'tr.group', function () {
                var currentOrder = table.order()[0];
                if (currentOrder[0] === groupColumn && currentOrder[1] === 'asc') {
                    table.order([groupColumn, 'desc']).draw();
                } else {
                    table.order([groupColumn, 'asc']).draw();
                }
            });


        });

        // Hide the search toggle in DataTable
        $('.filter-row').hide();

        // Toggle filter button click
        $('#toggleFilters').click(function () {
            $('.filter-row').toggle();
        });

        function openLineCollectionModal(action, url) {
            let modal = $('#LineListCreateModal');
            let title = action;// === 'Create' ? 'Add a New Line Collection' : 'Update Line Collection';

            $.get(url, function (response) {

                 $("#modalContent").html(response);
                 if(title==='Line List Details'){
                $("#isDraft").val(   $("#modalContent #isDraft").val()   );
                $("#isIssued").val(  $("#modalContent #isIssued").val()  );
                $("#isEpUser").val(  $("#modalContent #isEpUser").val()  );
                $("#isEpAdmin").val( $("#modalContent #isEpAdmin").val() );
                $("#isCenovusAdmin").val( $("#modalContent #isCenovusAdmin").val() );
                 }
                $(".modal-title").text(title);
                $.validator.unobtrusive.parse("#modalContent");
                modal.modal('show');
            }).fail(function () {
                alert("Error loading form.");
            });


        }

                $('#saveBtn').click(function () {
            var updatedItems = [];

            $('.statusCheckbox:not(:disabled)').each(function () {
                var id = $(this).data('id');
                var current = $(this).is(':checked');
                var original = $(this).data('original') === true || $(this).data('original') === "true";

                if (current !== original) {
                    updatedItems.push({ key: id, value: current });
                }
            });

            if (updatedItems.length === 0) {
                alert('No changes to save.');
                return;
            }

            $.ajax({
                url: '/ConcurrentEngineeringLine/UpdateStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(updatedItems),
                success: function (response) {
                    console.log("Update successful:", response);
                    $('#search').click();
                },
                error: function (err) {
                    console.log("Update unsuccessful:", err);
                    alert('Error saving status: ' + err.statusText);
                }
            });
        });


        $('#btnReset').click(function () {
             $('#search').click();
        });
    </script>
}
