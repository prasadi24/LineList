@using LineList.Cenovus.Com.API.DataTransferObjects.SizeNps
@model IEnumerable<SizeNpsResultDto>

<div class="mt-md-0">
    <div class="row">
        <div class="card mb-md-1">
            <div class="card-header">
                <h5 class="mb-3 page-header">Size NPS</h5>
                <hr />
                <div class="d-flex justify-content-between align-items-center">
                    <button class="btn btn-primary" id="btnCreateNew">
                        <i class="fas fa-plus"></i> ADD NEW SIZE NPS
                    </button>
                    <div class="d-flex align-items-center">
                        <label class="me-3">
                            <input type="checkbox" id="showActiveOnly" checked class="form-check-input" data-toggle="tooltip" data-placement="right" title="Only Show Active Records" />
                            ONLY SHOW ACTIVE
                        </label>
                        <button id="exportExcel" class="btn btn-primary">
                            <i class="fas fa-file-excel"></i> EXPORT TO EXCEL
                        </button>
                    </div>
                </div>
            </div>
            <div class="table">
                <table id="dataTable" class="table">
                    <thead>
                        <tr>
                            <th><button id="toggleFilters" class="btn-primary custom-icon-hover"><i class="fas fa-search"></i></button> Actions</th>
                            <th>@Html.DisplayNameFor(model => model.First().SortOrder)</th>
                            <th>@Html.DisplayNameFor(model => model.First().Name)</th>
                            <th>@Html.DisplayNameFor(model => model.First().DecimalValue)</th>
                            <th>@Html.DisplayNameFor(model => model.First().IsActive)</th>
                        </tr>
                        <tr id="searchInputs" class="filter-row">
                            <th></th>
                            <th><input type="text" class="form-control" placeholder="Sort" /></th>
                            <th><input type="text" class="form-control" placeholder="Name" /></th>
                            <th><input type="text" class="form-control" placeholder="Decimal Value" /></th>
                            <th><input type="text" class="form-control" placeholder="Active" /></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-id="@item.Id" data-active="@item.IsActive.ToString().ToLower()">
                                <td>
                                    <span class="btn-tooltip-disabled" data-toggle="tooltip" data-placement="right" title="This action is not available when the list is not sorted by the 'Sort Order' column, or the item is the first or last item in t">
                                        <button class="btn btn-sm btn-outline-primary btn-move-up" data-id="@item.Id" data-toggle="tooltip" data-placement="right" title="Move Row Up">
                                            <i class="fas fa-arrow-up"></i>
                                        </button>
                                    </span>
                                    <span class="btn-tooltip-disabled" data-toggle="tooltip" data-placement="right" title="This action is not available when the list is not sorted by the 'Sort Order' column, or the item is the first or last item in t">
                                        <button class="btn btn-sm btn-outline-primary btn-move-down" data-id="@item.Id" data-toggle="tooltip" data-placement="right" title="Move Row Down">
                                            <i class="fas fa-arrow-down"></i>
                                        </button>
                                    </span>
                                    <button class="btn btn-sm btn-outline-primary btn-update" data-id="@item.Id" data-name="@item.Name" data-toggle="tooltip" data-placement="right" title="Details">
                                        <i class="fas fa-file-import"></i>
                                    </button>
                                </td>
                                <td>@item.SortOrder</td>
                                <td>@item.Name</td>
                                <td>@item.DecimalValue</td>
                                <td>@(item.IsActive ? "Yes" : "No")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="sizeNPSModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title page-header"></h5>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body" id="modalContent"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
         $(document).ready(function () {
             initializeDataTable();table.on('draw', function () { updateMoveButtons(); });
             setupEventHandlers();
             if ($("#showActiveOnly").is(":checked")) {
                 filterActiveRecords();
             }
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                let isChecked = $("#showActiveOnly").is(":checked");
                let status = data[4];
                if (isChecked) {
                    return status === 'Yes';
                }
                return true;
            })
         });

         // Hide the search toggle in datatable
         $('.filter-row').hide();

         // Toggle filter button click
         $('#toggleFilters').click(function () {
             $('.filter-row').toggle();
         });

         function filterActiveRecords() {
             var showActiveOnly = $('#showActiveOnly').prop('checked');

             if (showActiveOnly) {
                     table.column(4).search("^Yes$", true, false).draw();
                 } else {
                     table.column(4).search("").draw();
                 }
             }

         function initializeDataTable() {
             let tableHeight = window.innerHeight - 150;

             window.table = $('#dataTable').DataTable({
                 dom: 'Brtlip',
                orderCellsTop: true,  order: [[1, 'asc']],
                 scrollY: '58vh',
                 scrollX: true,
                 scrollCollapse: true,
                 paging: false,
                 autoWidth: false,
                 responsive: true,
                 fixedHeader: true,
                 select: { style: 'single' },
                 buttons: [{
                     extend: 'excel',
                     text: 'Export to Excel', title: null,filename: 'LookupTable',customize: customizeExcelExport,
                     className: 'btn btn-primary export-button',
                     exportOptions: {
                         columns: ":not(:first-child)",
                         modifier: {
                             search: "applied",
                              order: "applied", selected: null
                         }
                     }
                 }],
                 columnDefs: [
                     { targets: 0, orderable: false, searchable: false, width: '120px' },
                     { targets: 1, width: '80px' },
                     { targets: 2, width: '100px' },
                     { targets: 3, width: '200px' },
                     { targets: 4, width: '50px' }
                 ],
                 initComplete: function () {
                     let table = this;
                     this.api().columns().every(function (index) {
                         if (index === 0) return;
                         $('input', $('#searchInputs th').eq(index)).on('keyup change', function () {
                             table.api().column(index).search(this.value).draw();
                             this.header().style.width = this.width() + "px";

                         });
                     });
                 }
             });
         }

         function setupEventHandlers() {
             // ONLY SHOW ACTIVE size NPS
             $('#showActiveOnly').on('change', function () {
                 filterActiveRecords();
             });

             // Export to Excel
             $('#exportExcel').on('click', function () {
                 table.button(0).trigger();
             });

             // Open Create Size NPS Modal
             $('#btnCreateNew').on('click', function () {
                 openSizeNPSModal('Create', '/SizeNPS/Create','');
             });

             // Open Update Size NPS Modal (Event Delegation)
             $(document).on('click', '.btn-update', function () {
                 let sizeNPSId = $(this).data("id");
                 let name = $(this).data("name");
                 openSizeNPSModal('Update', '/SizeNPS/Update/' + sizeNPSId,name);
             });

             // Delete Size NPS
             $(document).on('click', '.btn-delete', function () {
                 let sizeNPSId = $(this).data("id");
                  let canDel = $(this).data("candel");
                  let message = $(this).data("message");
                  if(canDel == 'False')
                  {
                      alert(message || "Error deleting size NPS.");
                      return;
                  }
                 if (confirm('Are you sure you want to delete this size NPS: ' +  $(this).data("name") + '?')) {
                     $.ajax({
                         url: "/SizeNPS/Delete/" + sizeNPSId,
                         type: "DELETE",
                         success: function (response) {
                             if (response.success) {
                                 location.reload();
                             } else {
                                 alert(response.errorMessage || "Error deleting size NPS.");
                             }
                         },
                         error: function (error) {
                             console.error("Error deleting size NPS:", error);
                         }
                     });
                 }
             });

           $(document).on('keyup', '#txtDecimalValue', function (e) {
                convertDecimal();
             });
             // Submit Create/Update Form
             $(document).on('click', '#btnSaveSizeNPS', function (e) {
                 e.preventDefault();
                 let form = $("#sizeNPSForm");

                 if (form.valid()) {
                     $.ajax({
                         url: form.attr("action"),
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             const validationMsg = document.getElementById('validationMsgUnique');
                             if (response.success) {
                                  // Hide the validation message if not duplicate
                                 validationMsg.style.display = 'none';
                                 validationMsg.style.visibility = 'hidden';
                                 $('#sizeNPSModal').modal('hide');
                                 location.reload();
                             } else {
                                 // Show the validation message
                                 validationMsg.style.display = 'block';
                                 validationMsg.style.visibility = 'visible';
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });
         }

         function openSizeNPSModal(action, url,name) {
             let modal = $('#sizeNPSModal');
             let title = action === 'Create' ? 'Add a New Size NPS' : 'Size NPS: '+name;

             $.get(url, function (response) {
                 $("#modalContent").html(response);
                 $(".modal-title").text(title);
                 $.validator.unobtrusive.parse("#modalContent");
                 modal.modal('show');
             }).fail(function () {
                 alert("Error loading form.");
             });
         }

        function convertDecimal() {
             var decimal =$('#sizeNPSModal').find('#txtDecimalValue').val();
             var fractionval=fraction(decimal);
             $('#sizeNPSModal').find('#txtName').val(fractionval);

         }

         //function to get highest common factor of two numbers (a fraction)
         function HCF(u, v) {
             var U = u, V = v
             while (true) {
                 if (!(U %= V)) return V
                 if (!(V %= U)) return U
             }
         }
         //convert a decimal into a fraction
         function fraction(decimal) {

             if (!decimal) {
                 return 0;
             }
             whole = String(decimal).split('.')[0];
             if (whole == decimal || (whole + '.' == decimal))
                 return decimal;
             decimal = parseFloat("." + String(decimal).split('.')[1]);
             num = "1";
             for (z = 0; z < String(decimal).length - 2; z++) {
                 num += "0";
             }
             decimal = decimal * num;
             num = parseInt(num);
             for (z = 2; z < decimal + 1; z++) {
                 if (decimal % z == 0 && num % z == 0) {
                     decimal = decimal / z;
                     num = num / z;
                     z = 2;
                 }
             }
             //if format of fraction is xx/xxx
             if (decimal.toString().length == 2 &&
                 num.toString().length == 3) {
                 //reduce by removing trailing 0's
                 decimal = Math.round(Math.round(decimal) / 10);
                 num = Math.round(Math.round(num) / 10);
             }
             //if format of fraction is xx/xx
             else if (decimal.toString().length == 2 &&
                 num.toString().length == 2) {
                 decimal = Math.round(decimal / 10);
                 num = Math.round(num / 10);
             }
             //get highest common factor to simplify
             var t = HCF(decimal, num);

             //return the fraction after simplifying it
             return ((whole == 0) ? "" : whole + " ") + decimal / t + "/" + num / t;
         }


    </script>
}
