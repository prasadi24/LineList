@using LineList.Cenovus.Com.API.DataTransferObjects.EpProject
@model IEnumerable<EpProjectResultDto>
@{
    Layout = "~/Views/Shared/_LayoutFull.cshtml";
    var eppLeadEng = (List<Guid>)ViewData["EppLeadEng"];
}

<div class="mt-md-0">
    <div class="row">
        <div class="card mb-md-1">
            <div class="card-header">
                <h5 class="mb-3 page-header">Project</h5>
                <hr />
                <div class="d-flex justify-content-between align-items-center">
                    @if ((bool)ViewData["IsCenovusAdmin"] || (bool)ViewData["IsEpAdmin"])
                    {
                        <button class="btn btn-primary" id="btnCreateNew">
                            <i class="fas fa-plus"></i> ADD NEW PROJECT
                        </button>
                    }
                    <div class="d-flex align-items-center">
                        <label class="me-3">
                            <input type="checkbox" id="showActiveOnly" checked class="form-check-input" data-toggle="tooltip" data-placement="right" title="Only Show Active Records" />
                            ONLY SHOW ACTIVE
                        </label>
                        <button id="exportExcel" class="btn btn-primary">
                            <i class="fas fa-file-excel"></i> EXPORT TO EXCEL
                        </button>
                    </div>
                </div>
            </div>
            <div class="table">
                <table id="dataTable" class="table">
                    <thead>
                        <tr>
                            <th><button id="toggleFilters" class="btn-primary custom-icon-hover"><i class="fas fa-search"></i></button> Actions</th>
                            <th>@Html.DisplayNameFor(model => model.First().FacilityName)</th>
                            <th>@Html.DisplayNameFor(model => model.First().ProjectTypeName)</th>
                            @* <th>@Html.DisplayNameFor(model => model.First().CenovusProjectName)</th> *@
                            <th>@Html.DisplayNameFor(model => model.First().Name)</th>
                            <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                            @if ((bool)ViewData["IsCenovusAdmin"])
                            {
                                <th>@Html.DisplayNameFor(model => model.First().EpCompanyName)</th>
                            }
                            <th>Created Date</th>
                            <th>@Html.DisplayNameFor(model => model.First().IsActive)</th>
                        </tr>
                        <tr id="searchInputs" class="filter-row">
                            <th></th>
                            <th><input type="text" class="form-control" placeholder="Facility" /></th>
                            <th><input type="text" class="form-control" placeholder="Project Type" /></th>
                            @* <th><input type="text" class="form-control" placeholder="CenovusProjectName" /></th> *@
                            <th><input type="text" class="form-control" placeholder="Project Number" /></th>
                            <th><input type="text" class="form-control" placeholder="Project Description" /></th>
                            @if ((bool)ViewData["IsCenovusAdmin"])
                            {
                                <th><input type="text" class="form-control" placeholder="EP" /></th>
                            }
                            <th><input type="text" class="form-control" placeholder="Created Date" /></th>
                            <th><input type="text" class="form-control" placeholder="Active" /></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr data-id="@item.Id" data-active="@item.IsActive.ToString().ToLower()">
                                <td>
                                    <button class="btn btn-sm btn-outline-primary btn-line-list" data-id="@item.Id" data-toggle="tooltip" data-placement="right" title="Line Lists for this Project">
                                        <i class="fas fa-chart-bar"></i>
                                    </button>
                                    @if ((bool)ViewData["IsCenovusAdmin"] || (bool)ViewData["IsEpAdmin"] || (eppLeadEng != null && eppLeadEng.Contains(item.Id)))
                                    {
                                        <button class="btn btn-sm btn-outline-primary btn-update" data-id="@item.Id" data-name="@item.Name" data-toggle="tooltip" data-placement="right" title="Project Details">
                                            <i class="fas fa-file-import"></i>
                                        </button>
                                    }
                                </td>
                                <td>@item.FacilityName</td>
                                <td>@item.ProjectTypeName</td>
                                @* <td>@item.CenovusProjectName</td> *@
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                @if ((bool)ViewData["IsCenovusAdmin"])
                                {
                                    <td>@item.EpCompanyName</td>
                                }
                                <td>@item.CreatedOn.ToString("yyyy-MM-dd hh:mm:ss tt")</td>
                                <td>@(item.IsActive ? "Yes" : "No")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="epProjectModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title page-header"></h5>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body" id="modalContent"></div>
        </div>
    </div>
</div>
<!-- Turnover Modal (new) -->
<div class="modal fade" id="turnoverModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-titleTurnover">Turnover Project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="turnoverModalContent">
                <!-- loaded via AJAX -->
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="epProjectRoleUserModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title-role-user"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body" id="modalContentRoleUser"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
         var globalIsCAdmin = @((bool)ViewData["IsCenovusAdmin"] ? "true" : "false");
         $(document).ready(function () {
             var showActive = '@(ViewData["ShowActive"]?.ToString().ToLower() ?? "false")' === 'true'; // Retrieve 'showActive' from ViewData
        // var IsCAdmin='@(ViewData["IsCenovusAdmin"]?.ToString().ToLower() ?? "false")' === 'true';

          initializeDataTable();
             table.on('draw', function () { updateMoveButtons(); });
             setupEventHandlers();
             setupRoleEventHandlers();
             // if ($('#showActiveOnly').prop('checked', Boolean(showActive))) {
             //     filterActiveRecords();
             // }
             if ($("#showActiveOnly").is(":checked")) {
                 filterActiveRecords();
             }
             // Initialize DataTables when modal is shown
             $('#epProjectModal').on('shown.bs.modal', function () {
                  // 1) EP-Alpha validation logic
                  function epAlphaCheck() {
                      var ep  = $('#epProjectModal #EpCompanyId').val();
                      var fac = $('#epProjectModal #FacilityId').val();
                      var $msg = $('#epProjectModal #epAlphaValidationMsg');
                      if (!ep || !fac) {
                          $msg.hide();
                          return;
                      }
                      $.post('@Url.Action("EPAlphaAvailableForFacility", "EpProject")', { epCompanyId: ep, facilityId: fac })
                          .done(function(res) {
                              if (res.valid) $msg.hide();
                              else          $msg.show();
                          });
                  }
                  // bind change
                  $('#epProjectModal #EpCompanyId, #epProjectModal #FacilityId')
                      .off('change.epAlpha')
                      .on('change.epAlpha', epAlphaCheck);
                  // initial check
                  epAlphaCheck();

                  // === end EP-Alpha injection ===

                 // Initialize TURNOVER button state
                  var $turnBtn = $('.btn-turnover');
                  if (!$turnBtn.length) return;
                   // normalize whatever string was output into lowercase
                   var canTurnover = String($turnBtn.data('can-turnover')).toLowerCase() === 'true';
                   // enable or disable accordingly
                    $turnBtn.prop('disabled', !canTurnover);
                    if (!canTurnover) {
                        $turnBtn.css('opacity', '0.6');
                     } else {
                         $turnBtn.css('opacity', ''); // reset opacity if needed
                     }
               
             });

           $(document).on('change', '#EpCompanyId', function () {
            let epCompanyId = $(this).val();
            $.ajax({
                url: '@Url.Action("GetInsulationDefaultsValues", "EpProject")',
                type: 'GET',
                data: { epCompanyId: epCompanyId },
                success: function (response) {
                    let dropdown = $('#InsulationTableDefaultsDropdown');
                    dropdown.empty();
                    dropdown.append('<option value="">-- Cenovus Insulation Table Defaults --</option>');

                    $.each(response, function (key, value) {
                        dropdown.append(`<option value="${key}">${value}</option>`);
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching insulation defaults:", error);
                }
            });
        });
         //  $('#insulationTable').on('draw.dt', function () {
         //     table.on('draw', function () { updateMoveButtons(); }); // Called after filtering/sorting/redrawing
         // });
         // 1) Your “block if no EP-Alpha” handler
         $(document).on('click', '#btnSaveEpProject', function (e) {
           var $msg = $('#epProjectModal #epAlphaValidationMsg');
           if ($msg.is(':visible')) {
             e.preventDefault();              // stop the default submit
             e.stopImmediatePropagation();    // kill any other click‐handlers
             $msg[0].scrollIntoView({ behavior: 'smooth' });
           }
         });

         // TURNOVER button click
             $(document).on('click', '.btn-turnover', function (e) {
                 e.preventDefault();
                 var projectId = $(this).data('id');
                 if (!projectId) {
                     showToast('Invalid project ID.', 'error');
                     return;
                 }
                 openTurnoverModal('/EpProject/Turnover/' + projectId);
             });

             // Submit Turnover form
             $(document).on('click', '#btnSaveTurnover', function (e) {
                 e.preventDefault();
                 var form = $('#turnoverForm');
                 var projectId = form.find('#ProjectId').val();
                 var epCompanyId = form.find('#ToEpCompanyId').val();

                 if (!projectId || !epCompanyId) {
                     showToast('Please select a target EP.', 'error');
                     return;
                 }

                 $.ajax({
                     url: '/EpProject/Turnover',
                     type: 'POST',
                     data: form.serialize(),
                     success: function (response) {
                         if (response.success) {
                             showToast('Project turned over successfully.', 'success');
                             location.reload();
                         } else {
                             showToast(response.errorMessage || 'Error turning over project.', 'error');
                         }
                     },
                     error: function () {
                         showToast('Error turning over project.', 'error');
                     }
                 });
             });

         $(document).on("click", ".btn-move-up, .btn-move-down", function (e) {
              e.preventDefault();
         });

         // Save Role (Create/Update)
         $(document).on('click', '#btnAddEpProjectUserRole1', function (e) {
             e.preventDefault();
              let form = $("#EpProjectUserRoleFormCreate");


             // NEW: Client-side validation
              let userName = $("#RoleUserName").val();
              let epProjectRoleId = $("#RoleEpProjectRoleId").val();
              let epProjectId = $("#RoleEpProjectId").val();

             if (!userName || !epProjectRoleId) {
                 showToast("Please select a user and project role.", "error");
                 return;
             }

             // NEW: Check role uniqueness
             $.ajax({
                  url: "/EpProjectUserRole/CheckUserInRole",
                  type: "POST",
                  data: { epProjectId: epProjectId, userName: userName },
                  success: function (response) {
                      if (response.exists) {
                          showToast("User already has a role for this EP Project.", "error");
                         return;
                      }

                      $.ajax({
                          url: "/EpProjectUserRole/Create",
                          type: "POST",
                           data: {
                                          UserName: userName,
                                          EpProjectRoleId: epProjectRoleId,
                                          EpProjectId: epProjectId
                                      },
                          success: function (response) {
                              if (response.success) {
                                  $('#epProjectRoleUserModal').modal('hide');
                                  showToast("Role saved successfully", "success");
                                  location.reload();
                              } else {
                                  showToast(response.ErrorMessage || "Error saving role", "error");
                             }
                          },

                          error: function (xhr, status, error) {
                             console.error("Error:", error);
                          }
                     });
                  },
                 error: function () {
                    showToast("Error checking role uniqueness", "error");
                }
             });
         });

              // Save Role (Create/Update)
         $(document).on('click', '#btnUpdateEpProjectUserRole', function (e) {
            e.preventDefault();
             let form = $("#EpProjectUserRoleForm");

             // NEW: Client-side validation
             let userName = $("#UserName").val();
             let epProjectRoleId = $("#EpProjectRoleId").val();
             let epProjectId = $("#EpProjectId").val();
             let id = $("#ProjectUserRoleId").val();
             if (!userName || !epProjectRoleId) {
                 showToast("Please select a user and project role.", "error");
                 return;
             }

             // NEW: Check role uniqueness
             $.ajax({
                 url: "/EpProjectUserRole/CheckUserInRole",
                 type: "POST",
                 data: { epProjectId: epProjectId, userName: userName },
                 success: function (response) {
                     if (response.exists) {
                         // NEW: Allow if updating the same role
                         let currentUserRole = $("#UserName").val();
                         if (currentUserRole !== userName) {
                             showToast("User already has a role for this EP Project.", "error");
                             return;
                         }
                     }

                     // CHANGED: Use form serialization
                     let formData = form.serialize();
                     $.ajax({
                         url: "/EpProjectUserRole/Update",
                         type: "POST",
                         data: formData,
                         success: function (response) {
                             if (response.success) {
                                 $('#epProjectRoleUserModal').modal('hide');
                                 showToast("Role saved successfully", "success");
                                 location.reload();
                             } else {
                                 showToast(response.ErrorMessage || "Error saving role", "error");
                             }
                         },
                         error: function () {
                             showToast("Error saving role", "error");
                         }
                     });
                 },
                 error: function () {
                     showToast("Error checking role uniqueness", "error");
                 }
             });
         });

              $(document).on('click', '.btn-edit-insulationdefault', function (e) {
                  e.preventDefault();
                     let id   = $(this).data("id");
                     let name = $(this).data("name") +' - ' +  $(this).data("desc") ;
                     let insulationDefaultId = $(this).data("id");
                openInsulationDefaultModal('Update', '/InsulationDefault/UpdateEP/' + insulationDefaultId, name);
              });

               $(document).on("click", ".btn-edit-table", function (e) {
                  e.preventDefault();
                 let id   = $(this).data("id");
                 let name = $(this).data("name") ;
                 let insulationDefaultId = $(this).data("id");

                 $.get(`/InsulationDefault/GetDetailsEp/${insulationDefaultId}?type=D`, function (response) {
                     $("#modalContent").html(response);
                     $(".modal-title").text("Project Insulation Table Default: " + name);
                     $("#insulationDefaultModal").modal("show");
                 }).fail(function () {
                     alert("Error loading insulation default details.");
                 });
             });

             $(document).on('click', '#btnSaveInsulationDefault', function (e) {
                 e.preventDefault();
                 let form = $("#insulationDefaultForm");

                 if (form.valid()) {
                     $.ajax({
                         url: form.attr("action"),
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#insulationDefaultModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.ErrorMessage || "Error saving insulation default.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });

             $(document).on('click', '#btnDelete', function () {
                 let insulationDefaultId = $(this).data("id");  // Get ID of the item to delete
                 if (confirm('Are you sure you want to delete this insulation default: ' +  $(this).data("name") + '?')) {
                     $.ajax({
                         url: "/InsulationDefault/Delete/" + insulationDefaultId,  // URL to delete the record
                         type: "DELETE",  // Type of request
                         success: function (response) {
                             if (response.success) {
                                 alert("Insulation Default deleted successfully.");
                                 location.reload();  // Reload the page to reflect changes
                             } else {
                                 alert(response.ErrorMessage || "Error deleting insulation default.");
                             }
                         },
                         error: function (error) {
                             console.error("Error deleting insulation default:", error);
                             alert("An error occurred while deleting.");
                         }
                     });
                 }
         });

             $(document).on("click", "#btnEditColumn", function () {
                    var id = $(this).data("id"); // Get ID from button
                    var name = $(this).data("name");
                    var desc = $(this).data("desc");
                    var type = "D"; // Or fetch dynamically if needed

                    $.get(`/EpProjectInsulationColumn/Update?id=${id}&type=${type}`, function (html) {
                     $("#mainPopup").hide();

                      // load the edit form
                     $("#dynamicContent").html(html);

                      // now find the <h5> inside that form and set your custom title
                     $("#insulationDefaultModal .modal-title")
                          .text(`Name: ${name} – ${desc}`);
                    })
                    .fail(function () {
                      alert("Error loading column definition."); // Load _Update.cshtml
                       });
                     });

                      $(document).on("click", "#btnEditRow", function () {
                        var id = $(this).data("id"); // Get ID from button
                         var type = "D"; // Or fetch dynamically if needed

                         $.get(`/EpProjectInsulationRow/Update?id=${id}&type=${type}`, function (data) {
                             $("#mainPopup").hide();
                             $("#dynamicContent").html(data); // Load _Update.cshtml
                         });
                     });

             $(document).on("submit", "#updateForm", function (e) {
                     e.preventDefault();

                     $.ajax({
                         url: "/InsulationColumn/Update",
                         type: "POST",
                         data: $(this).serialize(),
                         success: function (response) {
                             if (response.success) {
                                 alert("Update Successful!");
                                 $("#dynamicContent").empty(); // Clear _Update.cshtml
                                 $("#mainPopup").show(); // Show old popup again
                             } else {
                                 alert(response.ErrorMessage);
                             }
                         }
                     });
                 });

                  $(document).on("click", "#btnCancelEditRowColumn", function () {
                     $("#dynamicContent").empty(); // Clear _Update.cshtml
                     $("#mainPopup").show(); // Show old popup again
                 });

                  $(document).on("click", ".open-modal", function (e) {
                     e.preventDefault(); // Prevent default page navigation

                     var url = $(this).data("url"); // Get the URL from data-url attribute

                     $.get(url, function (response) {
                         $("#modalContent").html(response); // Load content into modal body
                         $("#insulationDetailsModal").modal("show"); // Show modal
                     }).fail(function () {
                         alert("Error loading details.");
                     });
                 });

                 $(document).on('click', '.btn-update-nps', function () {
                 let row = $(this).closest('tr'); // Get the row
                 enableSizeNpsEditing(row);
             });

             // Handle saving the updated Size NPS value
             $(document).on('click', '.btn-save-nps', function () {
                 let row = $(this).closest('tr');
                 saveSizeNps(row);
             });

             // Handle cancel editing
             $(document).on('click', '.btn-cancel-nps', function () {
                 let row = $(this).closest('tr');
                 cancelSizeNpsEditing(row);
             });

              $(document).on('click', '.btn-update-temp', function () {
                 let row = $(this).closest('tr');
                 enableTemperatureEditing(row);
             });

             $(document).on('click', '.btn-save-temp', function () {
                 let row = $(this).closest('tr');
                 saveTemperature(row);
             });

             $(document).on('click', '.btn-cancel-temp', function () {
                 let row = $(this).closest('tr');
                 cancelTemperatureEditing(row);
             });

              $(document).on("click", "#btnCreateNewRow", function () {
                 addNewRow();
             });

             // Handle saving the new row
             $(document).on("click", ".btn-save-new-row", function () {
                 let row = $(this).closest("tr");
                 saveNewRow(row);
             });

             // Handle canceling the new row
             $(document).on("click", ".btn-cancel-new-row", function () {
                 $(this).closest("tr").remove(); // Remove row on cancel
             });

             // Handle adding a new column
              $(document).on("click", "#btnCreateNewColumn", function () {
                 addNewColumn();
             });

             // Handle saving the new column
             $(document).on("click", ".btn-save-new-column", function () {
                 let col = $(this).closest("tr");
                 saveNewColumn(col);
             });

             // Handle canceling the new column
             $(document).on("click", ".btn-cancel-new-column", function () {
                 $(this).closest("tr").remove(); // Remove column on cancel
             });

             // Submit Create/Update Form
             $(document).on('click', '#btnSaveRow', function (e) {
                 e.preventDefault();
                 let form = $("#rowForm");

                 if (form.valid()) {
                     $.ajax({
                         url: form.attr("action"),
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#rowModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.ErrorMessage || "Error saving record.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });


         });

         // Hide the search toggle in DataTable
         $('.filter-row').hide();

         // Toggle filter button click
         $('#toggleFilters').click(function () {
             $('.filter-row').toggle();
         });

         function filterActiveRecords() {
             var showActiveOnly = $('#showActiveOnly').prop('checked');
               if(globalIsCAdmin==='true' || globalIsCAdmin===true)
             {
                 if (showActiveOnly) {
                 table.column(7).search("^Yes$", true, false).draw();
                 } else {
                     table.column(7).search("").draw();
                 }
             }
             else{
                 if (showActiveOnly) {
                     table.column(6).search("^Yes$", true, false).draw();
                 } else {
                     table.column(6).search("").draw();
                 }
             }
         }

         function initializeDataTable() {
             let tableHeight = window.innerHeight - 150;
     
              if(globalIsCAdmin==='true' || globalIsCAdmin===true)
              {
                 window.table = $('#dataTable').DataTable({
                     dom: 'Brtlip',
                     orderCellsTop: true,
                     order: [[1, 'asc']],
                     scrollY: '58vh',
                     scrollX: true,
                     scrollCollapse: true,
                     paging: false,
                     autoWidth: false,
                     responsive: false,
                     fixedHeader: true,
                     select: { style: 'single' },
                     buttons: [{
                         extend: 'excel',
                         text: 'Export to Excel', title: null,filename: 'LookupTable',customize: customizeExcelExport,
                         className: 'btn btn-primary export-button',
                         exportOptions: {
                             columns: ":not(:first-child)",
                             modifier: {
                                 search: "applied",
                                  order: "applied", selected: null
                             }
                         }
                     }],
                       columnDefs: [
                            { targets: 0, orderable: false, searchable: false, width: '120px' },
                            { targets: 1, width: '80px' },
                            { targets: 2, width: '100px' },
                            { targets: 3, width: '150px' },
                            { targets: 4, width: '350px' },
                            { targets: 5, width: '70px' },
                            { targets: 6, width: '150px' },
                            { targets: 7, width: '70px' }
                     ],
                     initComplete: function () {
                         let table = this;
                         this.api().columns().every(function (index) {
                             if (index === 0) return;
                             $('input', $('#searchInputs th').eq(index)).on('keyup change', function () {
                                 table.api().column(index).search(this.value).draw();
                             });
                         });
                     }
                 });
             }
             else {
                  window.table = $('#dataTable').DataTable({
                     dom: 'Brtlip',
                     orderCellsTop: true,
                     order: [[1, 'asc']],
                     scrollY: '58vh',
                     scrollX: true,
                     scrollCollapse: true,
                     paging: false,
                     autoWidth: false,
                     responsive: false,
                     fixedHeader: true,
                     select: { style: 'single' },
                     buttons: [{
                         extend: 'excel',
                         text: 'Export to Excel', title: null,filename: 'LookupTable',customize: customizeExcelExport,
                         className: 'btn btn-primary export-button',
                         exportOptions: {
                             columns: ":not(:first-child)",
                             modifier: {
                                 search: "applied",
                                  order: "applied", selected: null
                             }
                         }
                     }],
                       columnDefs: [
                            { targets: 0, orderable: false, searchable: false, width: '120px' },
                            { targets: 1, width: '80px' },
                            { targets: 2, width: '100px' },
                            { targets: 3, width: '150px' },
                            { targets: 4, width: '350px' },
                            { targets: 5, width: '150px' },
                            { targets: 6, width: '70px' }
                     ],
                     initComplete: function () {
                         let table = this;
                         this.api().columns().every(function (index) {
                             if (index === 0) return;
                             $('input', $('#searchInputs th').eq(index)).on('keyup change', function () {
                                 table.api().column(index).search(this.value).draw();
                             });
                         });
                     }
                 });
             }


         }

          function IntilizePopupDataTable() {
                if (!$.fn.DataTable.isDataTable('#roleTable')) {
                     window.roleTable = $('#roleTable').DataTable({
                         dom: 'Brtlip',
                         orderCellsTop: true,
                         order: [[1, 'asc']],
                         ordering: true,
                         scrollX: true,
                         scrollCollapse: true,
                         paging: false,
                         autoWidth: false,
                         responsive: false,
                         fixedHeader: true,
                         select: { style: 'single' },
                         buttons: [{
                             extend: 'excel',
                             text: 'Export to Excel', title: null,filename: 'LookupTable',customize: customizeExcelExport,
                             className: 'btn btn-primary export-button',
                             filename: 'UserRole',
                             exportOptions: {
                                 columns: ":not(:first-child)",
                                 modifier: { search: "applied",  order: "applied", selected: null }
                             }
                         }],
                         columnDefs: [
                                 { targets: 0, orderable: false, searchable: false, width: '230px' },
                                 { targets: 1, title: 'User Name', width: '320px' },
                                 { targets: 2, title: 'Role', width: '400px' }
                         ]
                     });
                      $('#roleTable').off('click.DT', 'th');
                 }

                 if (!$.fn.DataTable.isDataTable('#insulationTable')) {
                     window.insulationTable = $('#insulationTable').DataTable({
                         dom: 'Brtlip',
                         orderCellsTop: true,
                         order: [[5, 'asc']],
                         ordering: true,
                         scrollX: true,
                         scrollCollapse: true,
                         paging: false,
                         autoWidth: false,
                         responsive: false,
                         fixedHeader: true,
                         select: { style: 'single' },
                         buttons: [{
                             extend: 'excel',
                             text: 'Export to Excel', title: null,customize: customizeExcelExport,
                             className: 'btn btn-primary export-button',
                             filename: 'InsulationTableDefaults',
                             exportOptions: {
                                 columns: ":not(:first-child)",
                                 modifier: { search: "applied",  order: "applied", selected: null }
                             }
                         }],
                         columnDefs: [
                             { targets: 0, orderable: false, searchable: false, width:'150px' },
                             { targets: 1, width: '120px' },
                             { targets: 2, width: '250px' },
                             { targets: 3, width: '120px' },
                             { targets: 4, width: '100px' },
                             { targets: 5, width: '80px' }
                         ],
                             initComplete: function () {
                                 let table = this;
                                 table.on('draw', function () { updateMoveButtons(); });
                             this.api().columns().every(function (index) {
                                 if (index === 0) return;
                                 $('input', $('#searchInputs th').eq(index)).on('keyup change', function () {
                                     table.api().column(index).search(this.value).draw();
                                     this.header().style.width = this.width() + "px";

                                 });
                             });
                         }
                     });
                      $('#insulationTable').off('click.DT', 'th');
                 }
         }

         function setupEventHandlers() {
             $('#showActiveOnly').on('change', function () {
                 var showActiveOnly = $(this).prop('checked');
                 filterActiveRecords();
             });

              $(document).on('change', '.activeShowInsulation', function () {
                     var showActiveOnly = $(this).prop('checked');
                     filterActiveInsulationDefaultsRecords();
              });

             $('#exportExcel').on('click', function () {
                 table.button(0).trigger();
             });

             $('#btnCreateNew').on('click', function () {
                 openEpProjectModal('Create', '/EpProject/Create','');
             });


             $(document).on('click', '.btn-update', function () {
                 let projectId = $(this).data("id");
                 let name = $(this).data("name");
                 openEpProjectModal('Update', '/EpProject/Update/' + projectId, name);
             });

             $(document).on('click', '.btn-update-project-role', function (e) {
                 e.preventDefault();
                 let projectId = $(this).data("id");
                 openEpProjectRoleUserModal('Update', '/EpProjectUserRole/Update/' + projectId);
             });

             $(document).on('click', '.btn-delete', function () {
                 let projectId = $(this).data("id");
                 let projectName = $(this).data("name");
                 let projectDesc =  $(this).data("description");
                 let canDelete = $('#hiddenCanDelete').val();

                 if (!canDelete) {
                     let msg = `Cannot Delete \n\nProject ${projectName} - ${projectDesc} is currently being referenced by a Line List and cannot be deleted.\n\nPlease consider using the Edit Details function to uncheck the Active Indicator instead.`;
                     showToast(msg, "error");
                     return;
                 }

                 if (confirm(`Confirm Delete:\n\nAre you sure you wish to delete Project: ${projectName}?`)) {
                     $.ajax({
                         url: "/EpProject/Delete/" + projectId,
                         type: "DELETE",
                         success: function (response) {
                             if (response.success) {
                                 showToast("Project deleted successfully", "success");
                                 location.reload();
                             } else {
                                 showToast("Error deleting project", "error");
                                 alert(response.ErrorMessage || "Error deleting project.");
                             }
                         },
                         error: function (error) {
                             console.error("Error deleting project:", error);
                         }
                     });
                 }
             });
             $(document).on('click', '.btn-line-list', function () {
             let projectId = $(this).data("id");
             window.location.href = '/LineList?EpProject=' + projectId;
         });

             $(document).on('click', '#btnSaveEpProject', function (e) {
                 e.preventDefault();
                 let form = $("#epProjectForm");

                 if (form.valid()) {
                     $.ajax({
                         url: form.attr("action"),
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#epProjectModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.errorMessage  || "Error saving project.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });
         }

         function openEpProjectModal(action, url, name) {
             let modal = $('#epProjectModal');
                 let title = action === 'Create' ? 'Project: (new)' : 'Project: ' + name;

             $.get(url, function (response) {
                 $("#modalContent").html(response);
                 $(".modal-title").text(title);
                 $.validator.unobtrusive.parse("#modalContent");
                 modal.modal('show');
                 IntilizePopupDataTable();
             }).fail(function () {
                 alert("Error loading form.");
             });
         }

         function openEpProjectRoleUserModal(action, url) {
             let modal = $('#epProjectRoleUserModal');
             let title = action === 'Create' ? 'Add a New Role' : 'Update Role';

             $.get(url, function (response) {
                 $("#modalContentRoleUser").html(response);
                 $(".modal-title-role-user").text(title);
                 $.validator.unobtrusive.parse("#modalContentRoleUser");
                 modal.modal('show');

             }).fail(function () {
                 alert("Error loading form.");
             });
         }
           function openTurnoverModal(url) {
           $.get(url, function (response) {
             // load into the new modal
             $('#turnoverModalContent').html(response);
             // show it on top of whatever is already open
             var turnover = new bootstrap.Modal(document.getElementById('turnoverModal'), {
               backdrop: 'static',
               keyboard: false
             });
             turnover.show();
           }).fail(function () {
             showToast('Error loading turnover form.', 'error');
           });
         }

          


         // function updateProjectData(showActiveOnly) {
         //     This sends an AJAX request to the controller to reload the data with the showActive parameter
         //     $.ajax({
         //         url: '@Url.Action("Index", "EpProject")',
         //         type: 'GET',
         //         data: { showActive: showActiveOnly },
         //         success: function (data) {
         //             Reload the content (this assumes that the response is a partial view)
         //             $('#dataTable tbody').html($(data).find('#dataTable tbody').html()); Update the table body with new data
         //             const newRows = $(data).find('#dataTable tbody').html();
         //             if (newRows) {
         //                 $('#dataTable tbody').html(newRows);
         //             } else {
         //                 console.warn("No rows returned from server.");
         //             }
         //         },
         //         error: function (error) {
         //             console.error("Error fetching data: ", error);
         //         }
         //     });
         // }

         function setupRoleEventHandlers() {
             // Add New Role
             $(document).on('click', '#btnAddProjectRole', function (e) {
                 e.preventDefault();
                 let projectId = $(this).data("project-id")
                 if (!projectId) {
                     alert("Please save this Project before adding users to roles.");
                 } else {
                     // Proceed to open the modal for adding roles if projectId is valid
                     openRoleModal('Create', '/EpProjectUserRole/Create/' + projectId);
                 }
             });


             // Edit Role
             $(document).on('click', '.btn-edit', function () {
                 let roleId = $(this).data("id");
                 openRoleModal('Edit', '/EpProjectUserRole/Edit/' + roleId);
             });

             // Delete Role
             $(document).on('click', '.btn-Role-Delete', function () {
                 let roleId = $(this).data("id");
                 if (confirm('Are you sure you want to delete this role: ' +  $(this).data("name") + '?')) {
                     $.ajax({
                         url: "/EpProjectUserRole/Delete/" + roleId,
                         type: "DELETE",
                         success: function (response) {
                             if (response.success) {
                                 showToast("Role deleted successfully", "success");
                                 location.reload();
                             } else {
                                 showToast("Error deleting role", "error");
                             }
                         },
                         error: function () {
                             showToast("Error deleting role", "error");
                         }
                     });
                 }
             });

            $(document).on('click', '#exportRoles', function (e) {
                e.preventDefault(); // Prevent any default form submission
                if (window.roleTable && $.fn.DataTable.isDataTable('#roleTable')) {
                    window.roleTable.button(0).trigger();
                } else {
                    console.error("roleTable is not initialized or not a DataTable");
                }
            });

            $(document).on('click', '#exportInsulation', function (e) {
                e.preventDefault(); // Prevent any default form submission
                if (window.insulationTable && $.fn.DataTable.isDataTable('#insulationTable')) {
                    window.insulationTable.button(0).trigger();
                } else {
                    console.error("insulationTable is not initialized or not a DataTable");
                }
            });

         }

          $(document).on('click', '.btn-delete-insulation-ep', function () {
            let insulationDefaultId = $(this).data("id");  // Get ID of the item to delete
            if (confirm('Are you sure you wish to delete Insulation Table Default: ' +  $(this).data("name") + ' - ' +  $(this).data("desc") + '?')) {
                $.ajax({
                    url: "/InsulationDefault/DeleteEp/" + insulationDefaultId,  // URL to delete the record
                    type: "DELETE",  // Type of request
                    success: function (response) {
                        if (response.success) {
                            alert("Insulation Default deleted successfully.");
                            location.reload();  // Reload the page to reflect changes
                        } else {
                            alert(response.ErrorMessage || "Error deleting insulation default.");
                        }
                    },
                    error: function (error) {
                        console.error("Error deleting insulation default:", error);
                        alert("An error occurred while deleting.");
                    }
                });
            }
        });


            $(document).on('click', '#btnSaveInsulationDefaultEP', function (e) {
                e.preventDefault();
                let form = $("#insulationDefaultForm");

                if (form.valid()) {
                    $.ajax({
                        url: form.attr("action"),
                        type: "POST",
                        data: form.serialize(),
                        success: function (response) {
                            if (response.success) {
                                $('#insulationDefaultModal').modal('hide');
                                location.reload();
                            } else {
                                alert(response.ErrorMessage || "Error saving insulation default.");
                            }
                        },
                        error: function (error) {
                            console.error("Error submitting form:", error);
                        }
                    });
                }
            });

             $(document).on('click', '#btnInsDetailSave', function (e) {
                 e.preventDefault();
                 let form = $("#InsulationDetailsForm");

                 if (form.valid()) {
                     $.ajax({
                         url: "/EpProjectInsulationDefaultDetails/Update",
                         type: "POST",
                         data: form.serialize(),
                         success: function (response) {
                             if (response.success) {
                                 $('#insulationDetailsModal').modal('hide');
                                 location.reload();
                             } else {
                                 alert(response.ErrorMessage || "Error saving record.");
                             }
                         },
                         error: function (error) {
                             console.error("Error submitting form:", error);
                         }
                     });
                 }
             });

             $(document).on('click', '.btn-delete-ins-details', function () {
             let insulationDefaultId = $(this).data("id");  // Get ID of the item to delete
             if (confirm('Are you sure you want to delete this detail record?')) {
                 $.ajax({
                     url: "/EpProjectInsulationDefaultDetails/Delete/" + insulationDefaultId,  // URL to delete the record
                     type: "DELETE",  // Type of request
                     success: function (response) {
                         if (response.success) {
                             location.reload();  // Reload the page to reflect changes
                         } else {
                             alert(response.ErrorMessage || "Cannot delete this record—it’s in use by another table.");
                         }
                     },
                     error: function (error) {
                         console.error("Error deleting insulation default:", error);
                         alert("An error occurred while deleting.");
                     }
                 });
             }
         });

         function openRoleModal(action, url) {
             let modal = $('#roleModal');
             let title = action === 'Create' ? 'Project Role' : 'Project Role';

             $.get(url, function (response) {
                 $("#modalRoleContent").html(response);
                 $(".modal-title-role").text(title);
                 $.validator.unobtrusive.parse("#modalRoleContent");
                 modal.modal('show');
             }).fail(function () {
                 alert("Error loading form.");
             });
         }

         //Insulation Defaults functions
          function enableSizeNpsEditing(row) {
                  let id = row.data("id");

                  if (row.hasClass("editing")) return;
                  row.addClass("editing");

                  let currentSizeNps = row.find("td:eq(2)").text().trim();

                  // Fetch dropdown options
                  $.get("/EpProjectInsulationRow/GetSizeNpsOptions", function (data) {
                      let dropdown = `<select class="form-control size-nps-dropdown">`;
                      data.forEach(option => {
                          let selected = (option.name === currentSizeNps) ? "selected" : "";
                          dropdown += `<option value="${option.id}" ${selected}>${option.name}</option>`;
                      });
                      dropdown += `</select>`;

                      row.find("td:eq(2)").html(dropdown);

                      // Replace Update button with Save and Cancel buttons
                      row.find("td:eq(0)").html(`
                          <button class="btn btn-sm btn-primary btn-save-nps" data-id="${id}"><i class="fas fa-check"></i></button>
                          <button class="btn btn-sm btn-danger btn-cancel-nps"><i class="fas fa-times"></i></button>
                      `);
                  }).fail(function () {
                      alert("Error loading Size NPS options.");
                  });
              }


              function saveSizeNps(row) {
                  let id = row.data("id");
                  let insulationDefaultId = row.data("insulationdefaultid");
                  let selectedSizeNpsId = row.find("td:eq(2) select").val();
                  let selectedSizeNpsText = row.find("td:eq(2) select option:selected").text();
                  $.ajax({
                      url: "/EpProjectInsulationRow/UpdateSizeNps",
                      type: "POST",
                      data: { Id: id, sizeNpsId: selectedSizeNpsId, insulationDefaultId:insulationDefaultId  },
                      success: function (response) {
                          if (response.success) {
                              // Update table with new Size NPS value
                              row.find("td:eq(2)").text(selectedSizeNpsText);

                              // Restore original Update button
                              row.find("td:eq(0)").html(`
                                  <button class="btn btn-sm btn-outline-primary btn-update-nps" data-id="${id}">
                                      <i class="fas fa-file-import"></i>
                                  </button>
                              `);

                              row.removeClass("editing");
                          } else {
                              alert(response.errorMessage);
                          }
                      },
                      error: function (error) {
                          console.error("Error updating Size NPS:", error);
                      }
                  });
              }

         function cancelSizeNpsEditing(row) {
                  let originalSizeNps = row.find("td:eq(2) select option:selected").text();

                  row.find("td:eq(2)").text(originalSizeNps);

                  // Restore original Update button
                  row.find("td:eq(0)").html(`
                      <button class="btn btn-sm btn-outline-primary btn-update-nps" data-id="${row.data("id")}">
                          <i class="fas fa-file-import"></i>
                      </button>
                  `);

                  row.removeClass("editing");
              }

              function enableTemperatureEditing(row) {
                  let id = row.data("id");

                  if (row.hasClass("editing")) return;
                  row.addClass("editing");

                  // Get current values
                  let minTemp = row.find("td:eq(2)").text().trim();
                  let maxTemp = row.find("td:eq(3)").text().trim();

                  // Replace text with input fields
                  row.find("td:eq(2)").html(`<input type="number" class="form-control temp-input" value="${minTemp}" oninput="validateInteger(this)">`);
                  row.find("td:eq(3)").html(`<input type="number" class="form-control temp-input" value="${maxTemp}" oninput="validateInteger(this)">`);

                  // Replace Update button with Save and Cancel buttons
                  row.find("td:eq(0)").html(`
                      <button class="btn btn-sm btn-primary btn-save-temp" data-id="${id}"><i class="fas fa-check"></i></button>
                      <button class="btn btn-sm btn-danger btn-cancel-temp"><i class="fas fa-times"></i></button>
                  `);
              }

              // Function to validate integer input
              function validateInteger(input) {
                  input.value = input.value.replace(/[^0-9-]/g, ''); // Allows only numbers and negative sign
              }

              function saveTemperature(row) {
                  let id = row.data("id");
                  let updatedMinTemp = row.find("td:eq(2) input").val().trim();
                  let updatedMaxTemp = row.find("td:eq(3) input").val().trim();

                  // Ensure values are valid integers
                  if (isNaN(updatedMinTemp) || isNaN(updatedMaxTemp) || updatedMinTemp === "" || updatedMaxTemp === "") {
                      alert("Please enter valid integer values for Min and Max Operating Temperature.");
                      return;
                  }

                  $.ajax({
                      url: "/EpProjectInsulationColumn/UpdateTemperature",
                      type: "POST",
                      data: { Id: id, MinOperatingTemperature: updatedMinTemp, MaxOperatingTemperature: updatedMaxTemp },
                      success: function (response) {
                          if (response.success) {
                              // Update table with new values
                              row.find("td:eq(2)").text(updatedMinTemp);
                              row.find("td:eq(3)").text(updatedMaxTemp);

                              // Restore original Update button
                              row.find("td:eq(0)").html(`
                                  <button class="btn btn-sm btn-outline-primary btn-update-temp" data-id="${id}">
                                      <i class="fas fa-file-import"></i>
                                  </button>
                              `);

                              row.removeClass("editing");
                          } else {
                              alert(response.ErrorMessage || "Error updating temperatures.");
                          }
                      },
                      error: function (error) {
                          console.error("Error updating temperatures:", error);
                      }
                  });
              }

              function cancelTemperatureEditing(row) {
                  let originalMinTemp = row.find("td:eq(2) input").val();
                  let originalMaxTemp = row.find("td:eq(3) input").val();

                  row.find("td:eq(2)").text(originalMinTemp);
                  row.find("td:eq(3)").text(originalMaxTemp);

                  // Restore original Update button
                  row.find("td:eq(0)").html(`
                      <button class="btn btn-sm btn-outline-primary btn-update-temp" data-id="${row.data("id")}">
                          <i class="fas fa-file-import"></i>
                      </button>
                  `);

                  row.removeClass("editing");
              }

              // Function to add a new row inline
              function addNewRow() {
                  if ($("#dataTableRow tbody tr.new-row").length > 0) return; // Prevent multiple new rows

                  let insulationDefaultId = $("#dataTableRow tbody tr:first").data("insulationdefaultid")


                  $.get("/EpProjectInsulationRow/GetSizeNpsOptions", function (data) {
                      let dropdown = `<select class="form-control size-nps-dropdown">`;
                      data.forEach(option => {
                          dropdown += `<option value="${option.id}">${option.name}</option>`;
                      });
                      dropdown += `</select>`;

                      let newRow = `
                          <tr class="new-row" data-insulationdefaultid="${insulationDefaultId}">
                              <td>
                                  <button class="btn btn-sm btn-primary btn-save-new-row"><i class="fas fa-check"></i> </button>
                                  <button class="btn btn-sm btn-danger btn-cancel-new-row"><i class="fas fa-times"></i> </button>
                              </td>
                              <td></td>
                              <td>${dropdown}</td>
                          </tr>
                      `;

                      $("#dataTableRow tbody").prepend(newRow); // Insert new row at the top
                  }).fail(function () {
                      alert("Error loading Size NPS options.");
                  });
              }

              // Function to save the new row
              function saveNewRow(row) {
                  let sizeNpsId = row.find(".size-nps-dropdown").val();
                  let insulationDefaultId = row.data("insulationdefaultid");
                    let sizetext= row.find(".size-nps-dropdown option:selected").text();
                  if (!sizeNpsId) {
                      alert("Please select a Size NPS.");
                      return;
                  }
                   //  let minTemp = row.find("td:eq(2) input").val();
                  //  let maxTemp = row.find("td:eq(3) input").val();


                  $.ajax({
                      url: "/EpProjectInsulationRow/CreateRow",
                      type: "POST",
                      data: { SizeNpsId: sizeNpsId, InsulationDefaultId: insulationDefaultId },
                      success: function (response) {
                          if (response.success) {
                                let staticRow = `
                                   <tr data-insulationdefaultid="${insulationDefaultId}">
                                       <td>
                                           <button class="btn btn-sm btn-outline-primary btn-update-column"><i class="fas fa-edit"></i></button>
                                       </td>
                                       <td></td>
                                       <td></td>
                                        <td>${sizetext}</td>
                                   </tr>
                               `;
                              row.replaceWith(staticRow); // Replace editing row with the static row
                          } else {
                              alert(response.ErrorMessage || "Error adding row.");
                          }
                      },
                      error: function (error) {
                          console.error("Error adding row:", error);
                      }
                  });
              }

              // Function to add a new column inline
              function addNewColumn() {
                  if ($("#dataTableColumn tbody tr.new-column").length > 0) return; // Prevent multiple new columns

                   let insulationDefaultId = $("#dataTableColumn tbody tr:first").data("insulationdefaultid");

                  let newColumn = `
                      <tr class="new-column" data-insulationdefaultid="${insulationDefaultId}">
                          <td>
                              <button class="btn btn-sm btn-primary btn-save-new-column"><i class="fas fa-check"></i> </button>
                              <button class="btn btn-sm btn-danger btn-cancel-new-column"><i class="fas fa-times"></i> </button>
                          </td>
                          <td></td>
                          <td><input type="number" class="form-control min-temp-input" placeholder="Min Temp"></td>
                          <td><input type="number" class="form-control max-temp-input" placeholder="Max Temp"></td>
                      </tr>
                  `;

                  $("#dataTableColumn tbody").prepend(newColumn); // Insert new column at the top
              }

              // Function to save the new column
              function saveNewColumn(col) {
                  let minTemp = col.find(".min-temp-input").val().trim();
                  let maxTemp = col.find(".max-temp-input").val().trim();
                   let insulationDefaultId = col.data("insulationdefaultid");

                  if (minTemp === "" || maxTemp === "") {
                      showToast("Please enter Min and Max Temperature.", "warning");
                      return;
                  }

                  $.ajax({
                      url: "/EpProjectInsulationColumn/CreateColumn",
                      type: "POST",
                      data: {InsulationDefaultId: insulationDefaultId, MinOperatingTemperature: minTemp, MaxOperatingTemperature: maxTemp },
                      success: function (response) {
                          if (response.success) {
                              showToast("Record saved successfully", "success");
                               let staticRow = `
                                  <tr data-insulationdefaultid="${insulationDefaultId}">
                                      <td>
                                          <button class="btn btn-sm btn-outline-primary btn-update-column"><i class="fas fa-edit"></i></button>
                                      </td>
                                      <td></td>
                                      <td>${minTemp}</td>
                                      <td>${maxTemp}</td>
                                  </tr>
                              `;
                          } else {
                              showToast(response.ErrorMessage || "Error adding column.", "error");
                          }
                      },
                      error: function (error) {
                           showToast("Error adding column.", "error");
                      }
                  });
              }

         function openInsulationDefaultModal(action, url, name) {
             let modal = $('#insulationDefaultModal');
             let title = action === 'Create' ? 'Add a New Insulation Default' : 'Project Insulation Table Default: ' + name;

             $.get(url, function (response) {
                 $("#modalContent").html(response);
                 $(".modal-title").text(title);
                 $.validator.unobtrusive.parse("#modalContent");
                 modal.modal('show');
             }).fail(function () {
                 alert("Error loading form.");
             });
         }

         function updateMoveButtons() {
             $("#insulationTable tbody tr").find(".btn-move-up, .btn-move-down").prop("disabled", false); // Enable all first

             // Disable Move Up for the first row
             $("#insulationTable tbody tr:first .btn-move-up").prop("disabled", true);

             // Disable Move Down for the last row
             $("#insulationTable tbody tr:last .btn-move-down").prop("disabled", true);
         }
         function updateTableRowPosition(button, direction) {
             let currentRow = button.closest("tr");
             let swapRow = direction === "up" ? currentRow.prev("tr") : currentRow.next("tr");

             if (swapRow.length === 0) return; // No row to swap with

             let currentSortOrder = currentRow.find("td:nth-child(6)").text().trim();
             let swapSortOrder = swapRow.find("td:nth-child(6)").text().trim();

             // Swap SortOrder values in the UI
             currentRow.find("td:nth-child(6)").text(swapSortOrder);
             swapRow.find("td:nth-child(6)").text(currentSortOrder);

             // Swap row positions in the DOM
             if (direction === "up") {
                 currentRow.insertBefore(swapRow);
             } else {
                 currentRow.insertAfter(swapRow);
             }
         }

           function filterActiveInsulationDefaultsRecords() {
               var showActiveOnly = $('#showActiveOnlyInsulatoin').prop('checked');

                 var table=window.insulationTable;
                if (showActiveOnly) {
                  table.column(4).search("^Yes$", true, false).draw();
                  } else {
                      table.column(4).search("").draw();
                  }
          }
    </script>
}
